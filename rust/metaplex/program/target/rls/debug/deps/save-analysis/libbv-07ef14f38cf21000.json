{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1","program":"C:\\Users\\sagar\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","bv","C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"serde\"","-C","metadata=07ef14f38cf21000","-C","extra-filename=-07ef14f38cf21000","--out-dir","d:\\Solana\\metaplex-master\\metaplex-master\\rust\\metaplex\\program\\target\\rls\\debug\\deps","-L","dependency=d:\\Solana\\metaplex-master\\metaplex-master\\rust\\metaplex\\program\\target\\rls\\debug\\deps","--extern","serde=d:\\Solana\\metaplex-master\\metaplex-master\\rust\\metaplex\\program\\target\\rls\\debug\\deps\\libserde-53a9aed7ca9ee216.rmeta","--cap-lints","allow","--cfg","int_128","--cfg","inclusive_range","--error-format=json","--sysroot","C:\\Users\\sagar\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"d:\\Solana\\metaplex-master\\metaplex-master\\rust\\metaplex\\program\\target\\rls\\debug\\deps\\libbv-07ef14f38cf21000.rmeta"},"prelude":{"crate_id":{"name":"bv","disambiguator":[7837162366457308674,6082550752320250668]},"crate_root":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src","external_crates":[{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[902711862199739234,15082167224296373374]}},{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[5048311760381386034,12753961808535803278]}},{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[847775214756591688,12437863933651081164]}},{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[18098153966720408130,4102567439342721650]}},{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[14085577876822856882,15393158987199036233]}},{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[3188366355873518403,14471389999965490426]}},{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[10237517513868340142,18396708545822173986]}},{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[17305999185247584930,14125623615750666193]}},{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[7451980452763147359,4800032867518142595]}},{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[842541340887862638,17591716377464122790]}},{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[14650435931294811010,18006816567319070280]}},{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[16073749092757737146,5785406473963590530]}},{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","num":13,"id":{"name":"panic_unwind","disambiguator":[9426002052484834533,14451905897035318657]}},{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","num":14,"id":{"name":"serde","disambiguator":[2375289717161315889,15393998100997209667]}},{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","num":15,"id":{"name":"serde_derive","disambiguator":[12991404398941312549,942121558420680893]}}],"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":0,"byte_end":3489,"line_start":1,"line_end":132,"column_start":1,"column_end":17}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":36},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":3180,"byte_end":3189,"line_start":116,"line_end":116,"column_start":24,"column_end":33},"alias_span":null,"name":"BlockType","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":87},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":3227,"byte_end":3231,"line_start":119,"line_end":119,"column_start":24,"column_end":28},"alias_span":null,"name":"Bits","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":170},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":3233,"byte_end":3240,"line_start":119,"line_end":119,"column_start":30,"column_end":37},"alias_span":null,"name":"BitsExt","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":213},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":3242,"byte_end":3249,"line_start":119,"line_end":119,"column_start":39,"column_end":46},"alias_span":null,"name":"BitsMut","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":254},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":3251,"byte_end":3261,"line_start":119,"line_end":119,"column_start":48,"column_end":58},"alias_span":null,"name":"BitsMutExt","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":281},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":3263,"byte_end":3271,"line_start":119,"line_end":119,"column_start":60,"column_end":68},"alias_span":null,"name":"BitsPush","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":301},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":3296,"byte_end":3308,"line_start":120,"line_end":120,"column_start":24,"column_end":36},"alias_span":null,"name":"BitSliceable","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":305},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":3310,"byte_end":3325,"line_start":120,"line_end":120,"column_start":38,"column_end":53},"alias_span":null,"name":"BitSliceableMut","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1353},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":3362,"byte_end":3370,"line_start":123,"line_end":123,"column_start":23,"column_end":31},"alias_span":null,"name":"BitSlice","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":447},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":3372,"byte_end":3383,"line_start":123,"line_end":123,"column_start":33,"column_end":44},"alias_span":null,"name":"BitSliceMut","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1438},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":3423,"byte_end":3429,"line_start":126,"line_end":126,"column_start":24,"column_end":30},"alias_span":null,"name":"BitVec","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3111},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\mod.rs","byte_start":121720,"byte_end":121735,"line_start":12,"line_end":12,"column_start":34,"column_end":49},"alias_span":null,"name":"BitSliceAdapter","value":"","parent":{"krate":0,"index":934}},{"kind":"Use","ref_id":{"krate":0,"index":3133},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\mod.rs","byte_start":121771,"byte_end":121777,"line_start":15,"line_end":15,"column_start":23,"column_end":29},"alias_span":null,"name":"BitNot","value":"","parent":{"krate":0,"index":934}},{"kind":"Use","ref_id":{"krate":0,"index":3143},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\mod.rs","byte_start":121779,"byte_end":121785,"line_start":15,"line_end":15,"column_start":31,"column_end":37},"alias_span":null,"name":"BitAnd","value":"","parent":{"krate":0,"index":934}},{"kind":"Use","ref_id":{"krate":0,"index":3156},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\mod.rs","byte_start":121787,"byte_end":121792,"line_start":15,"line_end":15,"column_start":39,"column_end":44},"alias_span":null,"name":"BitOr","value":"","parent":{"krate":0,"index":934}},{"kind":"Use","ref_id":{"krate":0,"index":3169},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\mod.rs","byte_start":121794,"byte_end":121800,"line_start":15,"line_end":15,"column_start":46,"column_end":52},"alias_span":null,"name":"BitXor","value":"","parent":{"krate":0,"index":934}},{"kind":"Use","ref_id":{"krate":0,"index":3182},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\mod.rs","byte_start":121802,"byte_end":121808,"line_start":15,"line_end":15,"column_start":54,"column_end":60},"alias_span":null,"name":"BitZip","value":"","parent":{"krate":0,"index":934}},{"kind":"Use","ref_id":{"krate":0,"index":3502},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\mod.rs","byte_start":121850,"byte_end":121857,"line_start":18,"line_end":18,"column_start":25,"column_end":32},"alias_span":null,"name":"BitFill","value":"","parent":{"krate":0,"index":934}},{"kind":"Use","ref_id":{"krate":0,"index":3575},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\mod.rs","byte_start":121902,"byte_end":121911,"line_start":21,"line_end":21,"column_start":27,"column_end":36},"alias_span":null,"name":"BitConcat","value":"","parent":{"krate":0,"index":934}},{"kind":"Use","ref_id":{"krate":0,"index":3665},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\mod.rs","byte_start":121960,"byte_end":121971,"line_start":24,"line_end":24,"column_start":29,"column_end":40},"alias_span":null,"name":"BoolAdapter","value":"","parent":{"krate":0,"index":934}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":0,"byte_end":3489,"line_start":1,"line_end":132,"column_start":1,"column_end":17},"name":"","qualname":"::","value":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":26},{"krate":0,"index":29},{"krate":0,"index":69},{"krate":0,"index":72},{"krate":0,"index":366},{"krate":0,"index":367},{"krate":0,"index":370},{"krate":0,"index":373},{"krate":0,"index":376},{"krate":0,"index":379},{"krate":0,"index":382},{"krate":0,"index":385},{"krate":0,"index":388},{"krate":0,"index":628},{"krate":0,"index":629},{"krate":0,"index":632},{"krate":0,"index":635},{"krate":0,"index":872},{"krate":0,"index":875},{"krate":0,"index":890},{"krate":0,"index":928},{"krate":0,"index":934}],"decl_id":null,"docs":" The main type exported by the library, [`BitVec`], is a packed,\n growable bit-vector. Its API mirrors that of `Vec` where reasonable.","sig":null,"attributes":[{"value":"/ The main type exported by the library, [`BitVec`], is a packed,","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":55,"byte_end":122,"line_start":2,"line_end":2,"column_start":1,"column_end":68}},{"value":"/ growable bit-vector. Its API mirrors that of `Vec` where reasonable.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":123,"byte_end":195,"line_start":3,"line_end":3,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":196,"byte_end":199,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ The library also defines slice operations that return","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":200,"byte_end":257,"line_start":5,"line_end":5,"column_start":1,"column_end":58}},{"value":"/ [`BitSlice`] or [`BitSliceMut`], akin to Rust’s array slices but for","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":258,"byte_end":332,"line_start":6,"line_end":6,"column_start":1,"column_end":73}},{"value":"/ bit-vectors. A common API to bit-vectors and bit-slices is provided by the [`Bits`],","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":333,"byte_end":421,"line_start":7,"line_end":7,"column_start":1,"column_end":89}},{"value":"/ [`BitsMut`], and [`BitsPush`] traits. These traits also allow treating a variety","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":422,"byte_end":506,"line_start":8,"line_end":8,"column_start":1,"column_end":85}},{"value":"/ of other types as bit vectors:","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":507,"byte_end":541,"line_start":9,"line_end":9,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":542,"byte_end":545,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/  - all primitive unsigned integer types (*e.g.,* `u64`, `u32`),","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":546,"byte_end":613,"line_start":11,"line_end":11,"column_start":1,"column_end":68}},{"value":"/  - vectors and slices thereof (*e.g.*, `Vec<usize>`, `&[u8]`, `[u16; 4]`), and","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":614,"byte_end":696,"line_start":12,"line_end":12,"column_start":1,"column_end":83}},{"value":"/  - unpacked vectors and arrays of `bool` (*e.g.*, `[bool; 15]`).","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":697,"byte_end":765,"line_start":13,"line_end":13,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":766,"byte_end":769,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ Additionally, the [`BitsExt`] trait provides adapter methods including","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":770,"byte_end":844,"line_start":15,"line_end":15,"column_start":1,"column_end":75}},{"value":"/ bit-wise logic and concatenation. These adapters work for all types that implement","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":845,"byte_end":931,"line_start":16,"line_end":16,"column_start":1,"column_end":87}},{"value":"/ [`Bits`].","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":932,"byte_end":945,"line_start":17,"line_end":17,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":946,"byte_end":949,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":950,"byte_end":964,"line_start":19,"line_end":19,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":965,"byte_end":968,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ A first example with [`BitVec`]:","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":969,"byte_end":1005,"line_start":21,"line_end":21,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":1006,"byte_end":1009,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":1010,"byte_end":1017,"line_start":23,"line_end":23,"column_start":1,"column_end":8}},{"value":"/ use bv::BitVec;","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":1018,"byte_end":1037,"line_start":24,"line_end":24,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":1038,"byte_end":1041,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ let mut bv1: BitVec = BitVec::new_fill(false, 50);","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":1042,"byte_end":1096,"line_start":26,"line_end":26,"column_start":1,"column_end":55}},{"value":"/ let mut bv2: BitVec = BitVec::new_fill(false, 50);","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":1097,"byte_end":1151,"line_start":27,"line_end":27,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":1152,"byte_end":1155,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(bv1, bv2);","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":1156,"byte_end":1181,"line_start":29,"line_end":29,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":1182,"byte_end":1185,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ bv1.set(49, true);","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":1186,"byte_end":1208,"line_start":31,"line_end":31,"column_start":1,"column_end":23}},{"value":"/ assert_ne!(bv1, bv2);","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":1209,"byte_end":1234,"line_start":32,"line_end":32,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":1235,"byte_end":1238,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(bv1.pop(), Some(true));","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":1239,"byte_end":1277,"line_start":34,"line_end":34,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(bv2.pop(), Some(false));","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":1278,"byte_end":1317,"line_start":35,"line_end":35,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(bv1, bv2);","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":1318,"byte_end":1343,"line_start":36,"line_end":36,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":1344,"byte_end":1351,"line_start":37,"line_end":37,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":1352,"byte_end":1355,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ Adapters, from [`BitsExt`] and [`adapter`]:","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":1356,"byte_end":1403,"line_start":39,"line_end":39,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":1404,"byte_end":1407,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":1408,"byte_end":1415,"line_start":41,"line_end":41,"column_start":1,"column_end":8}},{"value":"/ use bv::*;","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":1416,"byte_end":1430,"line_start":42,"line_end":42,"column_start":1,"column_end":15}},{"value":"/ use bv::adapter::BoolAdapter;","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":1431,"byte_end":1464,"line_start":43,"line_end":43,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":1465,"byte_end":1468,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ // Here, we use an `&[u16]` as a bit vector, and we adapt a","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":1469,"byte_end":1532,"line_start":45,"line_end":45,"column_start":1,"column_end":64}},{"value":"/ // `Vec<bool>` as well.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":1533,"byte_end":1560,"line_start":46,"line_end":46,"column_start":1,"column_end":28}},{"value":"/ let array = &[0b1100u16];","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":1561,"byte_end":1590,"line_start":47,"line_end":47,"column_start":1,"column_end":30}},{"value":"/ let vec   = BoolAdapter::new(vec![false, true, false, true]);","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":1591,"byte_end":1656,"line_start":48,"line_end":48,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":1657,"byte_end":1660,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ // `xor` is not a `BitVec`, but a lazy adapter, thus, we can index","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":1661,"byte_end":1731,"line_start":50,"line_end":50,"column_start":1,"column_end":71}},{"value":"/ // it or efficiently compare it to another bit vector, without","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":1732,"byte_end":1798,"line_start":51,"line_end":51,"column_start":1,"column_end":67}},{"value":"/ // allocating.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":1799,"byte_end":1817,"line_start":52,"line_end":52,"column_start":1,"column_end":19}},{"value":"/ let xor   = array.bit_xor(&vec);","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":1818,"byte_end":1854,"line_start":53,"line_end":53,"column_start":1,"column_end":37}},{"value":"/ assert_eq!( xor, bit_vec![false, true, true, false] );","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":1855,"byte_end":1913,"line_start":54,"line_end":54,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":1914,"byte_end":1921,"line_start":55,"line_end":55,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":1922,"byte_end":1925,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ This function performs a three-way *or*, returning a `BitVec` without","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":1926,"byte_end":1999,"line_start":57,"line_end":57,"column_start":1,"column_end":74}},{"value":"/ allocating an intermediate result:","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":2000,"byte_end":2038,"line_start":58,"line_end":58,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":2039,"byte_end":2042,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":2043,"byte_end":2050,"line_start":60,"line_end":60,"column_start":1,"column_end":8}},{"value":"/ use bv::{Bits, BitsExt, BitVec};","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":2051,"byte_end":2087,"line_start":61,"line_end":61,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":2088,"byte_end":2091,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ fn three_way_or<T, U, V>(bv1: T, bv2: U, bv3: V) -> BitVec<T::Block>","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":2092,"byte_end":2164,"line_start":63,"line_end":63,"column_start":1,"column_end":73}},{"value":"/     where T: Bits,","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":2165,"byte_end":2187,"line_start":64,"line_end":64,"column_start":1,"column_end":23}},{"value":"/           U: Bits<Block = T::Block>,","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":2188,"byte_end":2228,"line_start":65,"line_end":65,"column_start":1,"column_end":41}},{"value":"/           V: Bits<Block = T::Block> {","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":2229,"byte_end":2270,"line_start":66,"line_end":66,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":2271,"byte_end":2274,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/     bv1.into_bit_or(bv2).into_bit_or(bv3).to_bit_vec()","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":2275,"byte_end":2333,"line_start":68,"line_end":68,"column_start":1,"column_end":59}},{"value":"/ }","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":2334,"byte_end":2339,"line_start":69,"line_end":69,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":2340,"byte_end":2347,"line_start":70,"line_end":70,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":2348,"byte_end":2351,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ # Usage","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":2352,"byte_end":2363,"line_start":72,"line_end":72,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":2364,"byte_end":2367,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ It’s [on crates.io](https://crates.io/crates/bv), so you can add","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":2368,"byte_end":2438,"line_start":74,"line_end":74,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":2439,"byte_end":2442,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ ```toml","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":2443,"byte_end":2454,"line_start":76,"line_end":76,"column_start":1,"column_end":12}},{"value":"/ [dependencies]","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":2455,"byte_end":2473,"line_start":77,"line_end":77,"column_start":1,"column_end":19}},{"value":"/ bv = \"0.11.1\"","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":2474,"byte_end":2491,"line_start":78,"line_end":78,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":2492,"byte_end":2499,"line_start":79,"line_end":79,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":2500,"byte_end":2503,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ to your `Cargo.toml` and","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":2504,"byte_end":2532,"line_start":81,"line_end":81,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":2533,"byte_end":2536,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":2537,"byte_end":2548,"line_start":83,"line_end":83,"column_start":1,"column_end":12}},{"value":"/ extern crate bv;","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":2549,"byte_end":2569,"line_start":84,"line_end":84,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":2570,"byte_end":2577,"line_start":85,"line_end":85,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":2578,"byte_end":2581,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ to your crate root.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":2582,"byte_end":2605,"line_start":87,"line_end":87,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":2606,"byte_end":2609,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"/ This crate supports Rust version 1.31 and newer.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":2610,"byte_end":2662,"line_start":89,"line_end":89,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":2663,"byte_end":2666,"line_start":90,"line_end":90,"column_start":1,"column_end":4}},{"value":"/ [`BitVec`]: struct.BitVec.html","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":2667,"byte_end":2701,"line_start":91,"line_end":91,"column_start":1,"column_end":35}},{"value":"/ [`Bits`]: trait.Bits.html","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":2702,"byte_end":2731,"line_start":92,"line_end":92,"column_start":1,"column_end":30}},{"value":"/ [`BitsMut`]: trait.BitsMut.html","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":2732,"byte_end":2767,"line_start":93,"line_end":93,"column_start":1,"column_end":36}},{"value":"/ [`BitsPush`]: trait.BitsPush.html","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":2768,"byte_end":2805,"line_start":94,"line_end":94,"column_start":1,"column_end":38}},{"value":"/ [`BitSlice`]: struct.BitSlice.html","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":2806,"byte_end":2844,"line_start":95,"line_end":95,"column_start":1,"column_end":39}},{"value":"/ [`BitSliceMut`]: struct.BitSliceMut.html","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":2845,"byte_end":2889,"line_start":96,"line_end":96,"column_start":1,"column_end":45}},{"value":"/ [`BitsExt`]: trait.BitsExt.html","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":2890,"byte_end":2925,"line_start":97,"line_end":97,"column_start":1,"column_end":36}},{"value":"/ [`adapter`]: adapter/index.html","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":2926,"byte_end":2961,"line_start":98,"line_end":98,"column_start":1,"column_end":36}},{"value":"warn(missing_docs)","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":2963,"byte_end":2985,"line_start":100,"line_end":100,"column_start":1,"column_end":23}}]},{"kind":"Trait","id":{"krate":0,"index":36},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":6073,"byte_end":6082,"line_start":7,"line_end":7,"column_start":11,"column_end":20},"name":"BlockType","qualname":"::storage::BlockType","value":"BlockType: Copy + PartialEq + Ord + ops::BitAnd<Output = Self> + ops::BitOr<Output =\nSelf> + ops::BitXor<Output = Self> + ops::Not<Output = Self> + ops::Shl<usize,\nOutput = Self> + ops::Shr<usize, Output = Self> + ops::Sub<Output = Self>","parent":null,"children":[{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":45},{"krate":0,"index":46},{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61}],"decl_id":null,"docs":" Interface to primitive bit storage.","sig":null,"attributes":[{"value":"/ Interface to primitive bit storage.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":5942,"byte_end":5981,"line_start":4,"line_end":4,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":5982,"byte_end":5985,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ Types implementing this trait can be used as the blocks of a bit-vector.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":5986,"byte_end":6062,"line_start":6,"line_end":6,"column_start":1,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":37},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":6562,"byte_end":6567,"line_start":20,"line_end":20,"column_start":8,"column_end":13},"name":"nbits","qualname":"::storage::BlockType::nbits","value":"pub fn nbits() -> usize","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" The number of bits in a block.\n","sig":null,"attributes":[{"value":"/ The number of bits in a block.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":6506,"byte_end":6540,"line_start":18,"line_end":18,"column_start":5,"column_end":39}},{"value":"inline","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":6545,"byte_end":6554,"line_start":19,"line_end":19,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":7012,"byte_end":7021,"line_start":32,"line_end":32,"column_start":8,"column_end":17},"name":"div_nbits","qualname":"::storage::BlockType::div_nbits","value":"pub fn div_nbits(u64) -> usize","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Returns `index / Self::nbits()`, computed by shifting.","sig":null,"attributes":[{"value":"/ Returns `index / Self::nbits()`, computed by shifting.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":6627,"byte_end":6685,"line_start":24,"line_end":24,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":6690,"byte_end":6693,"line_start":25,"line_end":25,"column_start":5,"column_end":8}},{"value":"/ This is intended for converting a bit address into a block","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":6698,"byte_end":6760,"line_start":26,"line_end":26,"column_start":5,"column_end":67}},{"value":"/ address, which is why it takes `u64` and returns `usize`.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":6765,"byte_end":6826,"line_start":27,"line_end":27,"column_start":5,"column_end":66}},{"value":"/ There is no check that the result actually fits in a `usize`,","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":6831,"byte_end":6896,"line_start":28,"line_end":28,"column_start":5,"column_end":70}},{"value":"/ so this should only be used when `index` is already known to","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":6901,"byte_end":6965,"line_start":29,"line_end":29,"column_start":5,"column_end":69}},{"value":"/ be small enough.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":6970,"byte_end":6990,"line_start":30,"line_end":30,"column_start":5,"column_end":25}},{"value":"inline","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":6995,"byte_end":7004,"line_start":31,"line_end":31,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":39},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":7389,"byte_end":7406,"line_start":42,"line_end":42,"column_start":8,"column_end":25},"name":"checked_div_nbits","qualname":"::storage::BlockType::checked_div_nbits","value":"pub fn checked_div_nbits(u64) -> Option<usize>","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Returns `index / Self::nbits()`, computed by shifting.","sig":null,"attributes":[{"value":"/ Returns `index / Self::nbits()`, computed by shifting.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":7101,"byte_end":7159,"line_start":36,"line_end":36,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":7164,"byte_end":7167,"line_start":37,"line_end":37,"column_start":5,"column_end":8}},{"value":"/ This is intended for converting a bit address into a block","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":7172,"byte_end":7234,"line_start":38,"line_end":38,"column_start":5,"column_end":67}},{"value":"/ address, which is why it takes `u64` and returns `usize`. It can only fail (returning","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":7239,"byte_end":7328,"line_start":39,"line_end":39,"column_start":5,"column_end":94}},{"value":"/ `None`) if `usize` is 32 bits.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":7333,"byte_end":7367,"line_start":40,"line_end":40,"column_start":5,"column_end":39}},{"value":"inline","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":7372,"byte_end":7381,"line_start":41,"line_end":41,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":7722,"byte_end":7736,"line_start":51,"line_end":51,"column_start":8,"column_end":22},"name":"ceil_div_nbits","qualname":"::storage::BlockType::ceil_div_nbits","value":"pub fn ceil_div_nbits(u64) -> usize","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Returns `index / Self::nbits()` rounded up, computed by shifting.","sig":null,"attributes":[{"value":"/ Returns `index / Self::nbits()` rounded up, computed by shifting.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":7496,"byte_end":7565,"line_start":46,"line_end":46,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":7570,"byte_end":7573,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ This is intended for converting a bit size into a block","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":7578,"byte_end":7637,"line_start":48,"line_end":48,"column_start":5,"column_end":64}},{"value":"/ size, which is why it takes `u64` and returns `usize`.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":7642,"byte_end":7700,"line_start":49,"line_end":49,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":7705,"byte_end":7714,"line_start":50,"line_end":50,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":41},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":8221,"byte_end":8243,"line_start":63,"line_end":63,"column_start":8,"column_end":30},"name":"checked_ceil_div_nbits","qualname":"::storage::BlockType::checked_ceil_div_nbits","value":"pub fn checked_ceil_div_nbits(u64) -> Option<usize>","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Returns `index / Self::nbits()` rounded up, computed by shifting.","sig":null,"attributes":[{"value":"/ Returns `index / Self::nbits()` rounded up, computed by shifting.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":7831,"byte_end":7900,"line_start":55,"line_end":55,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":7905,"byte_end":7908,"line_start":56,"line_end":56,"column_start":5,"column_end":8}},{"value":"/ This is intended for converting a bit size into a block","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":7913,"byte_end":7972,"line_start":57,"line_end":57,"column_start":5,"column_end":64}},{"value":"/ size, which is why it takes `u64` and returns `usize`.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":7977,"byte_end":8035,"line_start":58,"line_end":58,"column_start":5,"column_end":63}},{"value":"/ There is no check that the result actually fits in a `usize`,","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":8040,"byte_end":8105,"line_start":59,"line_end":59,"column_start":5,"column_end":70}},{"value":"/ so this should only be used when `index` is already known to","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":8110,"byte_end":8174,"line_start":60,"line_end":60,"column_start":5,"column_end":69}},{"value":"/ be small enough.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":8179,"byte_end":8199,"line_start":61,"line_end":61,"column_start":5,"column_end":25}},{"value":"inline","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":8204,"byte_end":8213,"line_start":62,"line_end":62,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":8586,"byte_end":8595,"line_start":72,"line_end":72,"column_start":8,"column_end":17},"name":"mod_nbits","qualname":"::storage::BlockType::mod_nbits","value":"pub fn mod_nbits(u64) -> usize","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Returns `index % Self::nbits()`, computed by masking.","sig":null,"attributes":[{"value":"/ Returns `index % Self::nbits()`, computed by masking.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":8354,"byte_end":8411,"line_start":67,"line_end":67,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":8416,"byte_end":8419,"line_start":68,"line_end":68,"column_start":5,"column_end":8}},{"value":"/ This is intended for converting a bit address into a bit offset","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":8424,"byte_end":8491,"line_start":69,"line_end":69,"column_start":5,"column_end":72}},{"value":"/ within a block, which is why it takes `u64` and returns `usize`.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":8496,"byte_end":8564,"line_start":70,"line_end":70,"column_start":5,"column_end":73}},{"value":"inline","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":8569,"byte_end":8578,"line_start":71,"line_end":71,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":43},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":8934,"byte_end":8943,"line_start":82,"line_end":82,"column_start":8,"column_end":17},"name":"mul_nbits","qualname":"::storage::BlockType::mul_nbits","value":"pub fn mul_nbits(usize) -> u64","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Returns `index * Self::nbits()`, computed by shifting.","sig":null,"attributes":[{"value":"/ Returns `index * Self::nbits()`, computed by shifting.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":8709,"byte_end":8767,"line_start":77,"line_end":77,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":8772,"byte_end":8775,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ This is intended for converting a block address into a bit address,","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":8780,"byte_end":8851,"line_start":79,"line_end":79,"column_start":5,"column_end":76}},{"value":"/ which is why it takes a `usize` and returns a `u64`.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":8856,"byte_end":8912,"line_start":80,"line_end":80,"column_start":5,"column_end":61}},{"value":"inline","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":8917,"byte_end":8926,"line_start":81,"line_end":81,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":9389,"byte_end":9399,"line_start":97,"line_end":97,"column_start":8,"column_end":18},"name":"block_bits","qualname":"::storage::BlockType::block_bits","value":"pub fn block_bits(u64, usize) -> usize","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" The number of bits in the block at `position`, given a total bit length\n of `len`.","sig":null,"attributes":[{"value":"/ The number of bits in the block at `position`, given a total bit length","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":9021,"byte_end":9096,"line_start":86,"line_end":86,"column_start":5,"column_end":80}},{"value":"/ of `len`.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":9101,"byte_end":9114,"line_start":87,"line_end":87,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":9119,"byte_end":9122,"line_start":88,"line_end":88,"column_start":5,"column_end":8}},{"value":"/ This will be `Self::nbits()` for all but the last block, for which it may","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":9127,"byte_end":9204,"line_start":89,"line_end":89,"column_start":5,"column_end":82}},{"value":"/ be less.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":9209,"byte_end":9221,"line_start":90,"line_end":90,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":9226,"byte_end":9229,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ # Precondition","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":9234,"byte_end":9252,"line_start":92,"line_end":92,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":9257,"byte_end":9260,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ `position * Self::nbits() <= len`, or the block doesn't exist and the result","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":9265,"byte_end":9345,"line_start":94,"line_end":94,"column_start":5,"column_end":85}},{"value":"/ is undefined.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":9350,"byte_end":9367,"line_start":95,"line_end":95,"column_start":5,"column_end":22}},{"value":"inline","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":9372,"byte_end":9381,"line_start":96,"line_end":96,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":45},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":9892,"byte_end":9900,"line_start":113,"line_end":113,"column_start":8,"column_end":16},"name":"lg_nbits","qualname":"::storage::BlockType::lg_nbits","value":"pub fn lg_nbits() -> usize","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Log-base-2 of the number of bits in a block.\n","sig":null,"attributes":[{"value":"/ Log-base-2 of the number of bits in a block.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":9822,"byte_end":9870,"line_start":111,"line_end":111,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":9875,"byte_end":9884,"line_start":112,"line_end":112,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":10028,"byte_end":10041,"line_start":119,"line_end":119,"column_start":8,"column_end":21},"name":"lg_nbits_mask","qualname":"::storage::BlockType::lg_nbits_mask","value":"pub fn lg_nbits_mask<Result: BlockType>() -> Result","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Mask with the lowest-order `lg_nbits()` set.\n","sig":null,"attributes":[{"value":"/ Mask with the lowest-order `lg_nbits()` set.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":9958,"byte_end":10006,"line_start":117,"line_end":117,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":10011,"byte_end":10020,"line_start":118,"line_end":118,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":10469,"byte_end":10477,"line_start":133,"line_end":133,"column_start":8,"column_end":16},"name":"low_mask","qualname":"::storage::BlockType::low_mask","value":"pub fn low_mask(usize) -> Self","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" The bit mask consisting of `Self::nbits() - element_bits` zeroes\n followed by `element_bits` ones.","sig":null,"attributes":[{"value":"/ The bit mask consisting of `Self::nbits() - element_bits` zeroes","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":10129,"byte_end":10197,"line_start":123,"line_end":123,"column_start":5,"column_end":73}},{"value":"/ followed by `element_bits` ones.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":10202,"byte_end":10238,"line_start":124,"line_end":124,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":10243,"byte_end":10246,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ The default implementation has a branch, but should be overrided with","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":10251,"byte_end":10324,"line_start":126,"line_end":126,"column_start":5,"column_end":78}},{"value":"/ a branchless algorithm if possible.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":10329,"byte_end":10368,"line_start":127,"line_end":127,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":10373,"byte_end":10376,"line_start":128,"line_end":128,"column_start":5,"column_end":8}},{"value":"/ # Precondition","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":10381,"byte_end":10399,"line_start":129,"line_end":129,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":10404,"byte_end":10407,"line_start":130,"line_end":130,"column_start":5,"column_end":8}},{"value":"/ `element_bits <= Self::nbits()`","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":10412,"byte_end":10447,"line_start":131,"line_end":131,"column_start":5,"column_end":40}},{"value":"inline","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":10452,"byte_end":10461,"line_start":132,"line_end":132,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":49},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":10940,"byte_end":10948,"line_start":151,"line_end":151,"column_start":8,"column_end":16},"name":"nth_mask","qualname":"::storage::BlockType::nth_mask","value":"pub fn nth_mask(usize) -> Self","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" The bit mask with the `bit_index`th bit set.","sig":null,"attributes":[{"value":"/ The bit mask with the `bit_index`th bit set.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":10727,"byte_end":10775,"line_start":143,"line_end":143,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":10780,"byte_end":10783,"line_start":144,"line_end":144,"column_start":5,"column_end":8}},{"value":"/ Bits are indexed in little-endian style based at 0.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":10788,"byte_end":10843,"line_start":145,"line_end":145,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":10848,"byte_end":10851,"line_start":146,"line_end":146,"column_start":5,"column_end":8}},{"value":"/ # Precondition","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":10856,"byte_end":10874,"line_start":147,"line_end":147,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":10879,"byte_end":10882,"line_start":148,"line_end":148,"column_start":5,"column_end":8}},{"value":"/ `bit_index < Self::nbits()`","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":10887,"byte_end":10918,"line_start":149,"line_end":149,"column_start":5,"column_end":36}},{"value":"inline","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":10923,"byte_end":10932,"line_start":150,"line_end":150,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":50},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":11218,"byte_end":11225,"line_start":163,"line_end":163,"column_start":8,"column_end":15},"name":"get_bit","qualname":"::storage::BlockType::get_bit","value":"pub fn get_bit(Self, usize) -> bool","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Extracts the value of the `bit_index`th bit.","sig":null,"attributes":[{"value":"/ Extracts the value of the `bit_index`th bit.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":11067,"byte_end":11115,"line_start":157,"line_end":157,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":11120,"byte_end":11123,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":11128,"byte_end":11140,"line_start":159,"line_end":159,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":11145,"byte_end":11148,"line_start":160,"line_end":160,"column_start":5,"column_end":8}},{"value":"/ Panics if `bit_index` is out of bounds.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":11153,"byte_end":11196,"line_start":161,"line_end":161,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":11201,"byte_end":11210,"line_start":162,"line_end":162,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":51},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":11583,"byte_end":11591,"line_start":174,"line_end":174,"column_start":8,"column_end":16},"name":"with_bit","qualname":"::storage::BlockType::with_bit","value":"pub fn with_bit(Self, usize, bool) -> Self","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Functionally updates the value of the `bit_index`th bit to `bit_value`.","sig":null,"attributes":[{"value":"/ Functionally updates the value of the `bit_index`th bit to `bit_value`.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":11405,"byte_end":11480,"line_start":168,"line_end":168,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":11485,"byte_end":11488,"line_start":169,"line_end":169,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":11493,"byte_end":11505,"line_start":170,"line_end":170,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":11510,"byte_end":11513,"line_start":171,"line_end":171,"column_start":5,"column_end":8}},{"value":"/ Panics if `bit_index` is out of bounds.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":11518,"byte_end":11561,"line_start":172,"line_end":172,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":11566,"byte_end":11575,"line_start":173,"line_end":173,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":12032,"byte_end":12040,"line_start":189,"line_end":189,"column_start":8,"column_end":16},"name":"get_bits","qualname":"::storage::BlockType::get_bits","value":"pub fn get_bits(Self, usize, usize) -> Self","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Extracts `len` bits starting at bit offset `start`.","sig":null,"attributes":[{"value":"/ Extracts `len` bits starting at bit offset `start`.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":11873,"byte_end":11928,"line_start":183,"line_end":183,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":11933,"byte_end":11936,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":11941,"byte_end":11953,"line_start":185,"line_end":185,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":11958,"byte_end":11961,"line_start":186,"line_end":186,"column_start":5,"column_end":8}},{"value":"/ Panics of the bit span is out of bounds.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":11966,"byte_end":12010,"line_start":187,"line_end":187,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":12015,"byte_end":12024,"line_start":188,"line_end":188,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":53},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":12416,"byte_end":12425,"line_start":202,"line_end":202,"column_start":8,"column_end":17},"name":"with_bits","qualname":"::storage::BlockType::with_bits","value":"pub fn with_bits(Self, usize, usize, Self) -> Self","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Functionally updates `len` bits to `value` starting at offset `start`.","sig":null,"attributes":[{"value":"/ Functionally updates `len` bits to `value` starting at offset `start`.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":12238,"byte_end":12312,"line_start":196,"line_end":196,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":12317,"byte_end":12320,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":12325,"byte_end":12337,"line_start":198,"line_end":198,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":12342,"byte_end":12345,"line_start":199,"line_end":199,"column_start":5,"column_end":8}},{"value":"/ Panics of the bit span is out of bounds.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":12350,"byte_end":12394,"line_start":200,"line_end":200,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":12399,"byte_end":12408,"line_start":201,"line_end":201,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":12820,"byte_end":12827,"line_start":214,"line_end":214,"column_start":8,"column_end":15},"name":"ceil_lg","qualname":"::storage::BlockType::ceil_lg","value":"pub fn ceil_lg(Self) -> usize","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Returns the smallest number `n` such that `2.pow(n) >= self`.\n","sig":null,"attributes":[{"value":"/ Returns the smallest number `n` such that `2.pow(n) >= self`.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":12733,"byte_end":12798,"line_start":212,"line_end":212,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":12803,"byte_end":12812,"line_start":213,"line_end":213,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":55},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":13106,"byte_end":13114,"line_start":223,"line_end":223,"column_start":8,"column_end":16},"name":"floor_lg","qualname":"::storage::BlockType::floor_lg","value":"pub fn floor_lg(Self) -> usize","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Returns the largest number `n` such that `2.pow(n) <= self`.\n","sig":null,"attributes":[{"value":"/ Returns the largest number `n` such that `2.pow(n) <= self`.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":13020,"byte_end":13084,"line_start":221,"line_end":221,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":13089,"byte_end":13098,"line_start":222,"line_end":222,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":13353,"byte_end":13365,"line_start":231,"line_end":231,"column_start":8,"column_end":20},"name":"wrapping_shl","qualname":"::storage::BlockType::wrapping_shl","value":"pub fn wrapping_shl(Self, u32) -> Self","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" A shift-left operation that does not overflow.\n","sig":null,"attributes":[{"value":"/ A shift-left operation that does not overflow.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":13295,"byte_end":13345,"line_start":230,"line_end":230,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":57},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":13457,"byte_end":13469,"line_start":234,"line_end":234,"column_start":8,"column_end":20},"name":"wrapping_sub","qualname":"::storage::BlockType::wrapping_sub","value":"pub fn wrapping_sub(Self, Self) -> Self","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" A subtraction operation that does not overflow.\n","sig":null,"attributes":[{"value":"/ A subtraction operation that does not overflow.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":13398,"byte_end":13449,"line_start":233,"line_end":233,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":58},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":13575,"byte_end":13588,"line_start":237,"line_end":237,"column_start":8,"column_end":21},"name":"leading_zeros","qualname":"::storage::BlockType::leading_zeros","value":"pub fn leading_zeros(Self) -> usize","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Returns the number of leading zero bits in the given number.\n","sig":null,"attributes":[{"value":"/ Returns the number of leading zero bits in the given number.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":13503,"byte_end":13567,"line_start":236,"line_end":236,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":59},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":13667,"byte_end":13675,"line_start":240,"line_end":240,"column_start":8,"column_end":16},"name":"to_usize","qualname":"::storage::BlockType::to_usize","value":"pub fn to_usize(Self) -> Option<usize>","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Converts the number to a `usize`, if it fits.\n","sig":null,"attributes":[{"value":"/ Converts the number to a `usize`, if it fits.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":13610,"byte_end":13659,"line_start":239,"line_end":239,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":13727,"byte_end":13731,"line_start":243,"line_end":243,"column_start":8,"column_end":12},"name":"zero","qualname":"::storage::BlockType::zero","value":"pub fn zero() -> Self","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Returns 0.\n","sig":null,"attributes":[{"value":"/ Returns 0.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":13705,"byte_end":13719,"line_start":242,"line_end":242,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":61},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":13770,"byte_end":13773,"line_start":246,"line_end":246,"column_start":8,"column_end":11},"name":"one","qualname":"::storage::BlockType::one","value":"pub fn one() -> Self","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Returns 1.\n","sig":null,"attributes":[{"value":"/ Returns 1.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":13748,"byte_end":13762,"line_start":245,"line_end":245,"column_start":5,"column_end":19}}]},{"kind":"Trait","id":{"krate":0,"index":87},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits.rs","byte_start":28828,"byte_end":28832,"line_start":18,"line_end":18,"column_start":11,"column_end":15},"name":"Bits","qualname":"::traits::bits::Bits","value":"Bits","parent":null,"children":[{"krate":0,"index":88},{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":91},{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":94},{"krate":0,"index":95}],"decl_id":null,"docs":" Read-only bit vector operations.","sig":null,"attributes":[{"value":"/ Read-only bit vector operations.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits.rs","byte_start":28426,"byte_end":28462,"line_start":5,"line_end":5,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits.rs","byte_start":28463,"byte_end":28466,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ Minimal complete definition is:","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits.rs","byte_start":28467,"byte_end":28502,"line_start":7,"line_end":7,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits.rs","byte_start":28503,"byte_end":28506,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/   - [`bit_len`] and","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits.rs","byte_start":28507,"byte_end":28530,"line_start":9,"line_end":9,"column_start":1,"column_end":24}},{"value":"/   - [`get_block`] or [`get_bit`].","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits.rs","byte_start":28531,"byte_end":28568,"line_start":10,"line_end":10,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits.rs","byte_start":28569,"byte_end":28572,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ Note that [`get_block`] in terms of [`get_bit`] is inefficient, and thus","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits.rs","byte_start":28573,"byte_end":28649,"line_start":12,"line_end":12,"column_start":1,"column_end":77}},{"value":"/ you should implement [`get_block`] directly if possible.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits.rs","byte_start":28650,"byte_end":28710,"line_start":13,"line_end":13,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits.rs","byte_start":28711,"byte_end":28714,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ [`bit_len`]: #method.bit_len","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits.rs","byte_start":28715,"byte_end":28747,"line_start":15,"line_end":15,"column_start":1,"column_end":33}},{"value":"/ [`get_bit`]: #method.get_bit","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits.rs","byte_start":28748,"byte_end":28780,"line_start":16,"line_end":16,"column_start":1,"column_end":33}},{"value":"/ [`get_block`]: #method.get_block","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits.rs","byte_start":28781,"byte_end":28817,"line_start":17,"line_end":17,"column_start":1,"column_end":37}}]},{"kind":"Type","id":{"krate":0,"index":88},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits.rs","byte_start":28916,"byte_end":28921,"line_start":20,"line_end":20,"column_start":10,"column_end":15},"name":"Block","qualname":"::traits::bits::Bits::Block","value":"type Block: BlockType;","parent":{"krate":0,"index":87},"children":[],"decl_id":null,"docs":" The underlying block type used to store the bits of the vector.\n","sig":null,"attributes":[{"value":"/ The underlying block type used to store the bits of the vector.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits.rs","byte_start":28839,"byte_end":28906,"line_start":19,"line_end":19,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":89},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits.rs","byte_start":28983,"byte_end":28990,"line_start":23,"line_end":23,"column_start":8,"column_end":15},"name":"bit_len","qualname":"::traits::bits::Bits::bit_len","value":"pub fn bit_len(&Self) -> u64","parent":{"krate":0,"index":87},"children":[],"decl_id":null,"docs":" The length of the slice in bits.\n","sig":null,"attributes":[{"value":"/ The length of the slice in bits.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits.rs","byte_start":28939,"byte_end":28975,"line_start":22,"line_end":22,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits.rs","byte_start":29057,"byte_end":29066,"line_start":26,"line_end":26,"column_start":8,"column_end":17},"name":"block_len","qualname":"::traits::bits::Bits::block_len","value":"pub fn block_len(&Self) -> usize","parent":{"krate":0,"index":87},"children":[],"decl_id":null,"docs":" The length of the slice in blocks.\n","sig":null,"attributes":[{"value":"/ The length of the slice in blocks.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits.rs","byte_start":29011,"byte_end":29049,"line_start":25,"line_end":25,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":91},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits.rs","byte_start":29366,"byte_end":29373,"line_start":38,"line_end":38,"column_start":8,"column_end":15},"name":"get_bit","qualname":"::traits::bits::Bits::get_bit","value":"pub fn get_bit(&Self, u64) -> bool","parent":{"krate":0,"index":87},"children":[],"decl_id":null,"docs":" Gets the bit at `position`","sig":null,"attributes":[{"value":"/ Gets the bit at `position`","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits.rs","byte_start":29148,"byte_end":29178,"line_start":30,"line_end":30,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits.rs","byte_start":29183,"byte_end":29186,"line_start":31,"line_end":31,"column_start":5,"column_end":8}},{"value":"/ The default implementation calls `get_block` and masks out the","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits.rs","byte_start":29191,"byte_end":29257,"line_start":32,"line_end":32,"column_start":5,"column_end":71}},{"value":"/ correct bit.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits.rs","byte_start":29262,"byte_end":29278,"line_start":33,"line_end":33,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits.rs","byte_start":29283,"byte_end":29286,"line_start":34,"line_end":34,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits.rs","byte_start":29291,"byte_end":29303,"line_start":35,"line_end":35,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits.rs","byte_start":29308,"byte_end":29311,"line_start":36,"line_end":36,"column_start":5,"column_end":8}},{"value":"/ Panics if `position` is out of bounds.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits.rs","byte_start":29316,"byte_end":29358,"line_start":37,"line_end":37,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits.rs","byte_start":30296,"byte_end":30305,"line_start":60,"line_end":60,"column_start":8,"column_end":17},"name":"get_block","qualname":"::traits::bits::Bits::get_block","value":"pub fn get_block(&Self, usize) -> Self::Block","parent":{"krate":0,"index":87},"children":[],"decl_id":null,"docs":" Gets the block at `position`, masked as necessary.","sig":null,"attributes":[{"value":"/ Gets the block at `position`, masked as necessary.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits.rs","byte_start":29658,"byte_end":29712,"line_start":46,"line_end":46,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits.rs","byte_start":29717,"byte_end":29720,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ The bits are laid out `Block::nbits()` per block, with the notional","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits.rs","byte_start":29725,"byte_end":29796,"line_start":48,"line_end":48,"column_start":5,"column_end":76}},{"value":"/ zeroth bit in the least significant position. If `self.bit_len()` is","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits.rs","byte_start":29801,"byte_end":29873,"line_start":49,"line_end":49,"column_start":5,"column_end":77}},{"value":"/ not a multiple of `Block::nbits()` then the last block will","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits.rs","byte_start":29878,"byte_end":29941,"line_start":50,"line_end":50,"column_start":5,"column_end":68}},{"value":"/ contain extra zero bits that are not part of the bit vector.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits.rs","byte_start":29946,"byte_end":30010,"line_start":51,"line_end":51,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits.rs","byte_start":30015,"byte_end":30018,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ The default implementation calls [`get_raw_block`](#method.get_raw_block),","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits.rs","byte_start":30023,"byte_end":30101,"line_start":53,"line_end":53,"column_start":5,"column_end":83}},{"value":"/ but you can override with something more efficient, for example if masking","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits.rs","byte_start":30106,"byte_end":30184,"line_start":54,"line_end":54,"column_start":5,"column_end":83}},{"value":"/ is unnecessary.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits.rs","byte_start":30189,"byte_end":30208,"line_start":55,"line_end":55,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits.rs","byte_start":30213,"byte_end":30216,"line_start":56,"line_end":56,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits.rs","byte_start":30221,"byte_end":30233,"line_start":57,"line_end":57,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits.rs","byte_start":30238,"byte_end":30241,"line_start":58,"line_end":58,"column_start":5,"column_end":8}},{"value":"/ Panics if `position` is out of bounds.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits.rs","byte_start":30246,"byte_end":30288,"line_start":59,"line_end":59,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":93},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits.rs","byte_start":31394,"byte_end":31407,"line_start":91,"line_end":91,"column_start":8,"column_end":21},"name":"get_raw_block","qualname":"::traits::bits::Bits::get_raw_block","value":"pub fn get_raw_block(&Self, usize) -> Self::Block","parent":{"krate":0,"index":87},"children":[],"decl_id":null,"docs":" Gets the block at `position`, without masking.","sig":null,"attributes":[{"value":"/ Gets the block at `position`, without masking.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits.rs","byte_start":30944,"byte_end":30994,"line_start":81,"line_end":81,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits.rs","byte_start":30999,"byte_end":31002,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ The default implementation of this method just delegates to [`get_block`](#method","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits.rs","byte_start":31007,"byte_end":31092,"line_start":83,"line_end":83,"column_start":5,"column_end":90}},{"value":"/ .get_block), which means it in fact does mask out extraneous bits. However, particular","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits.rs","byte_start":31097,"byte_end":31187,"line_start":84,"line_end":84,"column_start":5,"column_end":95}},{"value":"/ implementors may override this method to provide a more efficient implementation when","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits.rs","byte_start":31192,"byte_end":31281,"line_start":85,"line_end":85,"column_start":5,"column_end":94}},{"value":"/ one is possible.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits.rs","byte_start":31286,"byte_end":31306,"line_start":86,"line_end":86,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits.rs","byte_start":31311,"byte_end":31314,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits.rs","byte_start":31319,"byte_end":31331,"line_start":88,"line_end":88,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits.rs","byte_start":31336,"byte_end":31339,"line_start":89,"line_end":89,"column_start":5,"column_end":8}},{"value":"/ Panics if `position` is out of bounds.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits.rs","byte_start":31344,"byte_end":31386,"line_start":90,"line_end":90,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":94},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits.rs","byte_start":31685,"byte_end":31693,"line_start":101,"line_end":101,"column_start":8,"column_end":16},"name":"get_bits","qualname":"::traits::bits::Bits::get_bits","value":"pub fn get_bits(&Self, u64, usize) -> Self::Block","parent":{"krate":0,"index":87},"children":[],"decl_id":null,"docs":" Gets `count` bits starting at bit index `start`, interpreted as a\n little-endian integer.","sig":null,"attributes":[{"value":"/ Gets `count` bits starting at bit index `start`, interpreted as a","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits.rs","byte_start":31493,"byte_end":31562,"line_start":95,"line_end":95,"column_start":5,"column_end":74}},{"value":"/ little-endian integer.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits.rs","byte_start":31567,"byte_end":31593,"line_start":96,"line_end":96,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits.rs","byte_start":31598,"byte_end":31601,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits.rs","byte_start":31606,"byte_end":31618,"line_start":98,"line_end":98,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits.rs","byte_start":31623,"byte_end":31626,"line_start":99,"line_end":99,"column_start":5,"column_end":8}},{"value":"/ Panics if the bit span goes out of bounds.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits.rs","byte_start":31631,"byte_end":31677,"line_start":100,"line_end":100,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":95},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits.rs","byte_start":32599,"byte_end":32609,"line_start":127,"line_end":127,"column_start":8,"column_end":18},"name":"to_bit_vec","qualname":"::traits::bits::Bits::to_bit_vec","value":"pub fn to_bit_vec(&Self) -> BitVec<Self::Block>","parent":{"krate":0,"index":87},"children":[],"decl_id":null,"docs":" Copies the bits into a new allocated [`BitVec`].","sig":null,"attributes":[{"value":"/ Copies the bits into a new allocated [`BitVec`].","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits.rs","byte_start":32489,"byte_end":32541,"line_start":124,"line_end":124,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits.rs","byte_start":32546,"byte_end":32549,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ [`BitVec`]: ../struct.BitVec.html","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits.rs","byte_start":32554,"byte_end":32591,"line_start":126,"line_end":126,"column_start":5,"column_end":42}}]},{"kind":"Trait","id":{"krate":0,"index":170},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":38117,"byte_end":38124,"line_start":34,"line_end":34,"column_start":11,"column_end":18},"name":"BitsExt","qualname":"::traits::bits_ext::BitsExt","value":"BitsExt: Bits","parent":null,"children":[{"krate":0,"index":171},{"krate":0,"index":173},{"krate":0,"index":175},{"krate":0,"index":176},{"krate":0,"index":177},{"krate":0,"index":178},{"krate":0,"index":179},{"krate":0,"index":181},{"krate":0,"index":183},{"krate":0,"index":185},{"krate":0,"index":187},{"krate":0,"index":189},{"krate":0,"index":191},{"krate":0,"index":194}],"decl_id":null,"docs":" Extension trait for adapter operations on bit slices.","sig":null,"attributes":[{"value":"/ Extension trait for adapter operations on bit slices.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":37139,"byte_end":37196,"line_start":4,"line_end":4,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":37197,"byte_end":37200,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ The methods return lazy adapter objects that query the underlying bit vectors","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":37201,"byte_end":37282,"line_start":6,"line_end":6,"column_start":1,"column_end":82}},{"value":"/ and perform operations as needed. To eagerly evaluate a result, copy","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":37283,"byte_end":37355,"line_start":7,"line_end":7,"column_start":1,"column_end":73}},{"value":"/ it into a vector using the [`Bits::to_bit_vec`] method, as in the example below.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":37356,"byte_end":37440,"line_start":8,"line_end":8,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":37441,"byte_end":37444,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ This trait is currently `pub use`d from the [`adapter`] module, but that alias","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":37445,"byte_end":37527,"line_start":10,"line_end":10,"column_start":1,"column_end":83}},{"value":"/ is deprecated.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":37528,"byte_end":37546,"line_start":11,"line_end":11,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":37547,"byte_end":37550,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ [`Bits::to_bit_vec`]: trait.Bits.html#method.to_bit_vec","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":37551,"byte_end":37610,"line_start":13,"line_end":13,"column_start":1,"column_end":60}},{"value":"/ [`adapter`]: adapter/index.html","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":37611,"byte_end":37646,"line_start":14,"line_end":14,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":37647,"byte_end":37650,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":37651,"byte_end":37665,"line_start":16,"line_end":16,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":37666,"byte_end":37669,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":37670,"byte_end":37677,"line_start":18,"line_end":18,"column_start":1,"column_end":8}},{"value":"/ use bv::*;","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":37678,"byte_end":37692,"line_start":19,"line_end":19,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":37693,"byte_end":37696,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ let bv1: BitVec = bit_vec![false, false, true, true];","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":37697,"byte_end":37754,"line_start":21,"line_end":21,"column_start":1,"column_end":58}},{"value":"/ let bv2: BitVec = bit_vec![false, true, false, true];","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":37755,"byte_end":37812,"line_start":22,"line_end":22,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":37813,"byte_end":37816,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ let and_bv = bv1.bit_and(&bv2);","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":37817,"byte_end":37852,"line_start":24,"line_end":24,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":37853,"byte_end":37856,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ assert_eq!( and_bv[0], false );","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":37857,"byte_end":37892,"line_start":26,"line_end":26,"column_start":1,"column_end":36}},{"value":"/ assert_eq!( and_bv[1], false );","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":37893,"byte_end":37928,"line_start":27,"line_end":27,"column_start":1,"column_end":36}},{"value":"/ assert_eq!( and_bv[2], false );","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":37929,"byte_end":37964,"line_start":28,"line_end":28,"column_start":1,"column_end":36}},{"value":"/ assert_eq!( and_bv[3], true );","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":37965,"byte_end":37999,"line_start":29,"line_end":29,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":38000,"byte_end":38003,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ let bv3 = and_bv.to_bit_vec();","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":38004,"byte_end":38038,"line_start":31,"line_end":31,"column_start":1,"column_end":35}},{"value":"/ assert_eq!( bv3, bit_vec![false, false, false, true] );","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":38039,"byte_end":38098,"line_start":32,"line_end":32,"column_start":1,"column_end":60}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":38099,"byte_end":38106,"line_start":33,"line_end":33,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":171},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":38244,"byte_end":38254,"line_start":38,"line_end":38,"column_start":8,"column_end":18},"name":"bit_concat","qualname":"::traits::bits_ext::BitsExt::bit_concat","value":"pub fn bit_concat<Other>(&Self, Other) -> BitConcat<&Self, Other> where\nOther: Bits<Block = Self::Block>","parent":{"krate":0,"index":170},"children":[],"decl_id":null,"docs":" Concatenates two bit vectors, with the bits of `self` followed by the bits\n of `other`.\n","sig":null,"attributes":[{"value":"/ Concatenates two bit vectors, with the bits of `self` followed by the bits","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":38138,"byte_end":38216,"line_start":36,"line_end":36,"column_start":5,"column_end":83}},{"value":"/ of `other`.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":38221,"byte_end":38236,"line_start":37,"line_end":37,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":173},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":38546,"byte_end":38561,"line_start":48,"line_end":48,"column_start":8,"column_end":23},"name":"into_bit_concat","qualname":"::traits::bits_ext::BitsExt::into_bit_concat","value":"pub fn into_bit_concat<Other>(Self, Other) -> BitConcat<Self, Other> where\nSelf: Sized, Other: Bits<Block = Self::Block>","parent":{"krate":0,"index":170},"children":[],"decl_id":null,"docs":" Concatenates two bit vectors, with the bits of `self` followed by the bits\n of `other`.","sig":null,"attributes":[{"value":"/ Concatenates two bit vectors, with the bits of `self` followed by the bits","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":38407,"byte_end":38485,"line_start":44,"line_end":44,"column_start":5,"column_end":83}},{"value":"/ of `other`.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":38490,"byte_end":38505,"line_start":45,"line_end":45,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":38510,"byte_end":38513,"line_start":46,"line_end":46,"column_start":5,"column_end":8}},{"value":"/ Consumes `self`.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":38518,"byte_end":38538,"line_start":47,"line_end":47,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":175},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":38898,"byte_end":38905,"line_start":58,"line_end":58,"column_start":8,"column_end":15},"name":"bit_pad","qualname":"::traits::bits_ext::BitsExt::bit_pad","value":"pub fn bit_pad(&Self, u64) -> BitConcat<&Self, BitFill<Self::Block>>","parent":{"krate":0,"index":170},"children":[],"decl_id":null,"docs":" Pads `self` with 0s on the right to reach at least `len` bits in length.","sig":null,"attributes":[{"value":"/ Pads `self` with 0s on the right to reach at least `len` bits in length.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":38739,"byte_end":38815,"line_start":55,"line_end":55,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":38820,"byte_end":38823,"line_start":56,"line_end":56,"column_start":5,"column_end":8}},{"value":"/ If `self` is already long enough, the length is unchanged.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":38828,"byte_end":38890,"line_start":57,"line_end":57,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":176},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":39201,"byte_end":39213,"line_start":67,"line_end":67,"column_start":8,"column_end":20},"name":"into_bit_pad","qualname":"::traits::bits_ext::BitsExt::into_bit_pad","value":"pub fn into_bit_pad(Self, u64) -> BitConcat<Self, BitFill<Self::Block>> where\nSelf: Sized","parent":{"krate":0,"index":170},"children":[],"decl_id":null,"docs":" Pads `self` with 0s on the right to reach at least `len` bits in length.","sig":null,"attributes":[{"value":"/ Pads `self` with 0s on the right to reach at least `len` bits in length.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":39009,"byte_end":39085,"line_start":62,"line_end":62,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":39090,"byte_end":39093,"line_start":63,"line_end":63,"column_start":5,"column_end":8}},{"value":"/ If `self` is already long enough, the length is unchanged.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":39098,"byte_end":39160,"line_start":64,"line_end":64,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":39165,"byte_end":39168,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ Consumes `self`.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":39173,"byte_end":39193,"line_start":66,"line_end":66,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":177},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":39534,"byte_end":39541,"line_start":76,"line_end":76,"column_start":8,"column_end":15},"name":"bit_not","qualname":"::traits::bits_ext::BitsExt::bit_not","value":"pub fn bit_not(&Self) -> BitNot<&Self>","parent":{"krate":0,"index":170},"children":[],"decl_id":null,"docs":" Returns an object that inverts the values of all the bits in `self`.\n","sig":null,"attributes":[{"value":"/ Returns an object that inverts the values of all the bits in `self`.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":39454,"byte_end":39526,"line_start":75,"line_end":75,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":39718,"byte_end":39730,"line_start":83,"line_end":83,"column_start":8,"column_end":20},"name":"into_bit_not","qualname":"::traits::bits_ext::BitsExt::into_bit_not","value":"pub fn into_bit_not(Self) -> BitNot<Self> where Self: Sized","parent":{"krate":0,"index":170},"children":[],"decl_id":null,"docs":" Returns an object that inverts the values of all the bits in `self`.","sig":null,"attributes":[{"value":"/ Returns an object that inverts the values of all the bits in `self`.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":39605,"byte_end":39677,"line_start":80,"line_end":80,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":39682,"byte_end":39685,"line_start":81,"line_end":81,"column_start":5,"column_end":8}},{"value":"/ Consumes `self`.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":39690,"byte_end":39710,"line_start":82,"line_end":82,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":179},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":40038,"byte_end":40045,"line_start":94,"line_end":94,"column_start":8,"column_end":15},"name":"bit_and","qualname":"::traits::bits_ext::BitsExt::bit_and","value":"pub fn bit_and<Other>(&Self, Other) -> BitAnd<&Self, Other> where\nOther: Bits<Block = Self::Block>","parent":{"krate":0,"index":170},"children":[],"decl_id":null,"docs":" Returns an object that lazily computes the bit-wise conjunction\n of two bit-vector-likes.","sig":null,"attributes":[{"value":"/ Returns an object that lazily computes the bit-wise conjunction","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":39822,"byte_end":39889,"line_start":89,"line_end":89,"column_start":5,"column_end":72}},{"value":"/ of two bit-vector-likes.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":39894,"byte_end":39922,"line_start":90,"line_end":90,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":39927,"byte_end":39930,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ If the lengths of the operands differ, the result will have","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":39935,"byte_end":39998,"line_start":92,"line_end":92,"column_start":5,"column_end":68}},{"value":"/ the minimum of the two.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":40003,"byte_end":40030,"line_start":93,"line_end":93,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":181},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":40441,"byte_end":40453,"line_start":107,"line_end":107,"column_start":8,"column_end":20},"name":"into_bit_and","qualname":"::traits::bits_ext::BitsExt::into_bit_and","value":"pub fn into_bit_and<Other>(Self, Other) -> BitAnd<Self, Other> where\nSelf: Sized, Other: Bits<Block = Self::Block>","parent":{"krate":0,"index":170},"children":[],"decl_id":null,"docs":" Returns an object that lazily computes the bit-wise conjunction\n of two bit-vector-likes.","sig":null,"attributes":[{"value":"/ Returns an object that lazily computes the bit-wise conjunction","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":40192,"byte_end":40259,"line_start":100,"line_end":100,"column_start":5,"column_end":72}},{"value":"/ of two bit-vector-likes.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":40264,"byte_end":40292,"line_start":101,"line_end":101,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":40297,"byte_end":40300,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ If the lengths of the operands differ, the result will have","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":40305,"byte_end":40368,"line_start":103,"line_end":103,"column_start":5,"column_end":68}},{"value":"/ the minimum of the two.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":40373,"byte_end":40400,"line_start":104,"line_end":104,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":40405,"byte_end":40408,"line_start":105,"line_end":105,"column_start":5,"column_end":8}},{"value":"/ Consumes `self`.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":40413,"byte_end":40433,"line_start":106,"line_end":106,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":183},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":40840,"byte_end":40846,"line_start":118,"line_end":118,"column_start":8,"column_end":14},"name":"bit_or","qualname":"::traits::bits_ext::BitsExt::bit_or","value":"pub fn bit_or<Other>(&Self, Other) -> BitOr<&Self, Other> where\nOther: Bits<Block = Self::Block>","parent":{"krate":0,"index":170},"children":[],"decl_id":null,"docs":" Returns an object that lazily computes the bit-wise disjunction\n of two bit-vector-likes.","sig":null,"attributes":[{"value":"/ Returns an object that lazily computes the bit-wise disjunction","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":40624,"byte_end":40691,"line_start":113,"line_end":113,"column_start":5,"column_end":72}},{"value":"/ of two bit-vector-likes.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":40696,"byte_end":40724,"line_start":114,"line_end":114,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":40729,"byte_end":40732,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ If the lengths of the operands differ, the result will have","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":40737,"byte_end":40800,"line_start":116,"line_end":116,"column_start":5,"column_end":68}},{"value":"/ the minimum of the two.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":40805,"byte_end":40832,"line_start":117,"line_end":117,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":185},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":41240,"byte_end":41251,"line_start":131,"line_end":131,"column_start":8,"column_end":19},"name":"into_bit_or","qualname":"::traits::bits_ext::BitsExt::into_bit_or","value":"pub fn into_bit_or<Other>(Self, Other) -> BitOr<Self, Other> where\nSelf: Sized, Other: Bits<Block = Self::Block>","parent":{"krate":0,"index":170},"children":[],"decl_id":null,"docs":" Returns an object that lazily computes the bit-wise disjunction\n of two bit-vector-likes.","sig":null,"attributes":[{"value":"/ Returns an object that lazily computes the bit-wise disjunction","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":40991,"byte_end":41058,"line_start":124,"line_end":124,"column_start":5,"column_end":72}},{"value":"/ of two bit-vector-likes.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":41063,"byte_end":41091,"line_start":125,"line_end":125,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":41096,"byte_end":41099,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ If the lengths of the operands differ, the result will have","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":41104,"byte_end":41167,"line_start":127,"line_end":127,"column_start":5,"column_end":68}},{"value":"/ the minimum of the two.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":41172,"byte_end":41199,"line_start":128,"line_end":128,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":41204,"byte_end":41207,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ Consumes `self`.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":41212,"byte_end":41232,"line_start":130,"line_end":130,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":187},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":41629,"byte_end":41636,"line_start":143,"line_end":143,"column_start":8,"column_end":15},"name":"bit_xor","qualname":"::traits::bits_ext::BitsExt::bit_xor","value":"pub fn bit_xor<Other>(&Self, Other) -> BitXor<&Self, Other> where\nOther: Bits<Block = Self::Block>","parent":{"krate":0,"index":170},"children":[],"decl_id":null,"docs":" Returns an object that lazily computes the bit-wise xor of two\n bit-vector-likes.","sig":null,"attributes":[{"value":"/ Returns an object that lazily computes the bit-wise xor of two","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":41421,"byte_end":41487,"line_start":138,"line_end":138,"column_start":5,"column_end":71}},{"value":"/ bit-vector-likes.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":41492,"byte_end":41513,"line_start":139,"line_end":139,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":41518,"byte_end":41521,"line_start":140,"line_end":140,"column_start":5,"column_end":8}},{"value":"/ If the lengths of the operands differ, the result will have","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":41526,"byte_end":41589,"line_start":141,"line_end":141,"column_start":5,"column_end":68}},{"value":"/ the minimum of the two.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":41594,"byte_end":41621,"line_start":142,"line_end":142,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":189},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":42024,"byte_end":42036,"line_start":156,"line_end":156,"column_start":8,"column_end":20},"name":"into_bit_xor","qualname":"::traits::bits_ext::BitsExt::into_bit_xor","value":"pub fn into_bit_xor<Other>(Self, Other) -> BitXor<Self, Other> where\nSelf: Sized, Other: Bits<Block = Self::Block>","parent":{"krate":0,"index":170},"children":[],"decl_id":null,"docs":" Returns an object that lazily computes the bit-wise xor of two\n bit-vector-likes.","sig":null,"attributes":[{"value":"/ Returns an object that lazily computes the bit-wise xor of two","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":41783,"byte_end":41849,"line_start":149,"line_end":149,"column_start":5,"column_end":71}},{"value":"/ bit-vector-likes.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":41854,"byte_end":41875,"line_start":150,"line_end":150,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":41880,"byte_end":41883,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ If the lengths of the operands differ, the result will have","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":41888,"byte_end":41951,"line_start":152,"line_end":152,"column_start":5,"column_end":68}},{"value":"/ the minimum of the two.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":41956,"byte_end":41983,"line_start":153,"line_end":153,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":41988,"byte_end":41991,"line_start":154,"line_end":154,"column_start":5,"column_end":8}},{"value":"/ Consumes `self`.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":41996,"byte_end":42016,"line_start":155,"line_end":155,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":191},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":42631,"byte_end":42638,"line_start":172,"line_end":172,"column_start":8,"column_end":15},"name":"bit_zip","qualname":"::traits::bits_ext::BitsExt::bit_zip","value":"pub fn bit_zip<Other, F>(&Self, Other, F) -> BitZip<&Self, Other, F> where\nOther: Bits<Block = Self::Block>, F: Fn(Self::Block, Self::Block, usize) ->\nSelf::Block","parent":{"krate":0,"index":170},"children":[],"decl_id":null,"docs":" Returns an object that lazily zips a function over the blocks of\n two bit-vector-like.","sig":null,"attributes":[{"value":"/ Returns an object that lazily zips a function over the blocks of","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":42208,"byte_end":42276,"line_start":163,"line_end":163,"column_start":5,"column_end":73}},{"value":"/ two bit-vector-like.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":42281,"byte_end":42305,"line_start":164,"line_end":164,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":42310,"byte_end":42313,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ The third parameter to the zipping function `fun` is the number of","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":42318,"byte_end":42388,"line_start":166,"line_end":166,"column_start":5,"column_end":75}},{"value":"/ bits in the block currently being processed. (This will be","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":42393,"byte_end":42455,"line_start":167,"line_end":167,"column_start":5,"column_end":67}},{"value":"/ `Self::Block::nbits()` for all but the last block.)","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":42460,"byte_end":42515,"line_start":168,"line_end":168,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":42520,"byte_end":42523,"line_start":169,"line_end":169,"column_start":5,"column_end":8}},{"value":"/ If the lengths of the operands differ, the result will have","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":42528,"byte_end":42591,"line_start":170,"line_end":170,"column_start":5,"column_end":68}},{"value":"/ the minimum of the two.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":42596,"byte_end":42623,"line_start":171,"line_end":171,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":194},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":43329,"byte_end":43341,"line_start":190,"line_end":190,"column_start":8,"column_end":20},"name":"into_bit_zip","qualname":"::traits::bits_ext::BitsExt::into_bit_zip","value":"pub fn into_bit_zip<Other, F>(Self, Other, F) -> BitZip<Self, Other, F> where\nSelf: Sized, Other: Bits<Block = Self::Block>,\nF: Fn(Self::Block, Self::Block, usize) -> Self::Block","parent":{"krate":0,"index":170},"children":[],"decl_id":null,"docs":" Returns an object that lazily zips a function over the blocks of\n two bit-vector-like.","sig":null,"attributes":[{"value":"/ Returns an object that lazily zips a function over the blocks of","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":42873,"byte_end":42941,"line_start":179,"line_end":179,"column_start":5,"column_end":73}},{"value":"/ two bit-vector-like.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":42946,"byte_end":42970,"line_start":180,"line_end":180,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":42975,"byte_end":42978,"line_start":181,"line_end":181,"column_start":5,"column_end":8}},{"value":"/ The third parameter to the zipping function `fun` is the number of","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":42983,"byte_end":43053,"line_start":182,"line_end":182,"column_start":5,"column_end":75}},{"value":"/ bits in the block currently being processed. (This will be","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":43058,"byte_end":43120,"line_start":183,"line_end":183,"column_start":5,"column_end":67}},{"value":"/ `Self::Block::nbits()` for all but the last block.)","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":43125,"byte_end":43180,"line_start":184,"line_end":184,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":43185,"byte_end":43188,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ If the lengths of the operands differ, the result will have","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":43193,"byte_end":43256,"line_start":186,"line_end":186,"column_start":5,"column_end":68}},{"value":"/ the minimum of the two.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":43261,"byte_end":43288,"line_start":187,"line_end":187,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":43293,"byte_end":43296,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ Consumes `self`.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":43301,"byte_end":43321,"line_start":189,"line_end":189,"column_start":5,"column_end":25}}]},{"kind":"Trait","id":{"krate":0,"index":213},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_mut.rs","byte_start":44007,"byte_end":44014,"line_start":10,"line_end":10,"column_start":11,"column_end":18},"name":"BitsMut","qualname":"::traits::bits_mut::BitsMut","value":"BitsMut: Bits","parent":null,"children":[{"krate":0,"index":214},{"krate":0,"index":215},{"krate":0,"index":216}],"decl_id":null,"docs":" Mutable bit vector operations that don’t affect the length.","sig":null,"attributes":[{"value":"/ Mutable bit vector operations that don’t affect the length.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_mut.rs","byte_start":43685,"byte_end":43750,"line_start":4,"line_end":4,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_mut.rs","byte_start":43751,"byte_end":43754,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ Minimal complete definition is `set_bit` or `set_block`, since each","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_mut.rs","byte_start":43755,"byte_end":43826,"line_start":6,"line_end":6,"column_start":1,"column_end":72}},{"value":"/ is defined in terms of the other. Note that `set_block` in terms of","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_mut.rs","byte_start":43827,"byte_end":43898,"line_start":7,"line_end":7,"column_start":1,"column_end":72}},{"value":"/ `set_bit` is inefficient, and thus you should implement `set_block`","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_mut.rs","byte_start":43899,"byte_end":43970,"line_start":8,"line_end":8,"column_start":1,"column_end":72}},{"value":"/ directly if possible.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_mut.rs","byte_start":43971,"byte_end":43996,"line_start":9,"line_end":9,"column_start":1,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":214},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_mut.rs","byte_start":44238,"byte_end":44245,"line_start":18,"line_end":18,"column_start":8,"column_end":15},"name":"set_bit","qualname":"::traits::bits_mut::BitsMut::set_bit","value":"pub fn set_bit(&mut Self, u64, bool)","parent":{"krate":0,"index":213},"children":[],"decl_id":null,"docs":" Sets the bit at `position` to `value`.","sig":null,"attributes":[{"value":"/ Sets the bit at `position` to `value`.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_mut.rs","byte_start":44027,"byte_end":44069,"line_start":11,"line_end":11,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_mut.rs","byte_start":44074,"byte_end":44077,"line_start":12,"line_end":12,"column_start":5,"column_end":8}},{"value":"/ The default implementation uses `get_raw_block` and `set_block`.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_mut.rs","byte_start":44082,"byte_end":44150,"line_start":13,"line_end":13,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_mut.rs","byte_start":44155,"byte_end":44158,"line_start":14,"line_end":14,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_mut.rs","byte_start":44163,"byte_end":44175,"line_start":15,"line_end":15,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_mut.rs","byte_start":44180,"byte_end":44183,"line_start":16,"line_end":16,"column_start":5,"column_end":8}},{"value":"/ Panics if `position` is out of bounds.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_mut.rs","byte_start":44188,"byte_end":44230,"line_start":17,"line_end":17,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":215},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_mut.rs","byte_start":45297,"byte_end":45306,"line_start":41,"line_end":41,"column_start":8,"column_end":17},"name":"set_block","qualname":"::traits::bits_mut::BitsMut::set_block","value":"pub fn set_block(&mut Self, usize, Self::Block)","parent":{"krate":0,"index":213},"children":[],"decl_id":null,"docs":" Sets the block at `position` to `value`.","sig":null,"attributes":[{"value":"/ Sets the block at `position` to `value`.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_mut.rs","byte_start":44631,"byte_end":44675,"line_start":27,"line_end":27,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_mut.rs","byte_start":44680,"byte_end":44683,"line_start":28,"line_end":28,"column_start":5,"column_end":8}},{"value":"/ The bits are laid out `Block::nbits()` per block, with the notional","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_mut.rs","byte_start":44688,"byte_end":44759,"line_start":29,"line_end":29,"column_start":5,"column_end":76}},{"value":"/ zeroth bit in the least significant position. If `self.bit_len()` is","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_mut.rs","byte_start":44764,"byte_end":44836,"line_start":30,"line_end":30,"column_start":5,"column_end":77}},{"value":"/ not a multiple of `Block::nbits()` then the last block will","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_mut.rs","byte_start":44841,"byte_end":44904,"line_start":31,"line_end":31,"column_start":5,"column_end":68}},{"value":"/ contain extra bits that are not part of the bit vector. Implementations","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_mut.rs","byte_start":44909,"byte_end":44984,"line_start":32,"line_end":32,"column_start":5,"column_end":80}},{"value":"/ of `set_block` should not change those trailing bits.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_mut.rs","byte_start":44989,"byte_end":45046,"line_start":33,"line_end":33,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_mut.rs","byte_start":45051,"byte_end":45054,"line_start":34,"line_end":34,"column_start":5,"column_end":8}},{"value":"/ The default implementation sets a block by setting each of its bits","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_mut.rs","byte_start":45059,"byte_end":45130,"line_start":35,"line_end":35,"column_start":5,"column_end":76}},{"value":"/ in turn. Consider it a slow reference implementation, and override it.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_mut.rs","byte_start":45135,"byte_end":45209,"line_start":36,"line_end":36,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_mut.rs","byte_start":45214,"byte_end":45217,"line_start":37,"line_end":37,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_mut.rs","byte_start":45222,"byte_end":45234,"line_start":38,"line_end":38,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_mut.rs","byte_start":45239,"byte_end":45242,"line_start":39,"line_end":39,"column_start":5,"column_end":8}},{"value":"/ Panics if `position` is out of bounds.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_mut.rs","byte_start":45247,"byte_end":45289,"line_start":40,"line_end":40,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":216},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_mut.rs","byte_start":45887,"byte_end":45895,"line_start":58,"line_end":58,"column_start":8,"column_end":16},"name":"set_bits","qualname":"::traits::bits_mut::BitsMut::set_bits","value":"pub fn set_bits(&mut Self, u64, usize, Self::Block)","parent":{"krate":0,"index":213},"children":[],"decl_id":null,"docs":" Sets `count` bits starting at bit index `start`, interpreted as a\n little-endian integer.","sig":null,"attributes":[{"value":"/ Sets `count` bits starting at bit index `start`, interpreted as a","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_mut.rs","byte_start":45695,"byte_end":45764,"line_start":52,"line_end":52,"column_start":5,"column_end":74}},{"value":"/ little-endian integer.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_mut.rs","byte_start":45769,"byte_end":45795,"line_start":53,"line_end":53,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_mut.rs","byte_start":45800,"byte_end":45803,"line_start":54,"line_end":54,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_mut.rs","byte_start":45808,"byte_end":45820,"line_start":55,"line_end":55,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_mut.rs","byte_start":45825,"byte_end":45828,"line_start":56,"line_end":56,"column_start":5,"column_end":8}},{"value":"/ Panics if the bit span goes out of bounds.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_mut.rs","byte_start":45833,"byte_end":45879,"line_start":57,"line_end":57,"column_start":5,"column_end":51}}]},{"kind":"Trait","id":{"krate":0,"index":254},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_mut_ext.rs","byte_start":49001,"byte_end":49011,"line_start":5,"line_end":5,"column_start":11,"column_end":21},"name":"BitsMutExt","qualname":"::traits::bits_mut_ext::BitsMutExt","value":"BitsMutExt: BitsMut","parent":null,"children":[{"krate":0,"index":255},{"krate":0,"index":257},{"krate":0,"index":260},{"krate":0,"index":263},{"krate":0,"index":266}],"decl_id":null,"docs":" Extension trait for mutable operations on bit slices.\n","sig":null,"attributes":[{"value":"/ Extension trait for mutable operations on bit slices.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_mut_ext.rs","byte_start":48933,"byte_end":48990,"line_start":4,"line_end":4,"column_start":1,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":255},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_mut_ext.rs","byte_start":49158,"byte_end":49168,"line_start":11,"line_end":11,"column_start":8,"column_end":18},"name":"bit_assign","qualname":"::traits::bits_mut_ext::BitsMutExt::bit_assign","value":"pub fn bit_assign<T: Bits<Block = Self::Block>>(&mut Self, T)","parent":{"krate":0,"index":254},"children":[],"decl_id":null,"docs":" Assigns the bits of `other` to `self`.","sig":null,"attributes":[{"value":"/ Assigns the bits of `other` to `self`.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_mut_ext.rs","byte_start":49027,"byte_end":49069,"line_start":6,"line_end":6,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_mut_ext.rs","byte_start":49074,"byte_end":49077,"line_start":7,"line_end":7,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_mut_ext.rs","byte_start":49082,"byte_end":49094,"line_start":8,"line_end":8,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_mut_ext.rs","byte_start":49099,"byte_end":49102,"line_start":9,"line_end":9,"column_start":5,"column_end":8}},{"value":"/ If `self.bit_len() != other.bit_len()`.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_mut_ext.rs","byte_start":49107,"byte_end":49150,"line_start":10,"line_end":10,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":257},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_mut_ext.rs","byte_start":49986,"byte_end":50000,"line_start":35,"line_end":35,"column_start":8,"column_end":22},"name":"bit_and_assign","qualname":"::traits::bits_mut_ext::BitsMutExt::bit_and_assign","value":"pub fn bit_and_assign<T: Bits<Block = Self::Block>>(&mut Self, T)","parent":{"krate":0,"index":254},"children":[],"decl_id":null,"docs":" Assigns the bit-wise *and* of `self` and `other` to `self`.","sig":null,"attributes":[{"value":"/ Assigns the bit-wise *and* of `self` and `other` to `self`.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_mut_ext.rs","byte_start":49834,"byte_end":49897,"line_start":30,"line_end":30,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_mut_ext.rs","byte_start":49902,"byte_end":49905,"line_start":31,"line_end":31,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_mut_ext.rs","byte_start":49910,"byte_end":49922,"line_start":32,"line_end":32,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_mut_ext.rs","byte_start":49927,"byte_end":49930,"line_start":33,"line_end":33,"column_start":5,"column_end":8}},{"value":"/ If `self.bit_len() != other.bit_len()`.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_mut_ext.rs","byte_start":49935,"byte_end":49978,"line_start":34,"line_end":34,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":260},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_mut_ext.rs","byte_start":50270,"byte_end":50283,"line_start":44,"line_end":44,"column_start":8,"column_end":21},"name":"bit_or_assign","qualname":"::traits::bits_mut_ext::BitsMutExt::bit_or_assign","value":"pub fn bit_or_assign<T: Bits<Block = Self::Block>>(&mut Self, T)","parent":{"krate":0,"index":254},"children":[],"decl_id":null,"docs":" Assigns the bit-wise *or* of `self` and `other` to `self`.","sig":null,"attributes":[{"value":"/ Assigns the bit-wise *or* of `self` and `other` to `self`.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_mut_ext.rs","byte_start":50119,"byte_end":50181,"line_start":39,"line_end":39,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_mut_ext.rs","byte_start":50186,"byte_end":50189,"line_start":40,"line_end":40,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_mut_ext.rs","byte_start":50194,"byte_end":50206,"line_start":41,"line_end":41,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_mut_ext.rs","byte_start":50211,"byte_end":50214,"line_start":42,"line_end":42,"column_start":5,"column_end":8}},{"value":"/ If `self.bit_len() != other.bit_len()`.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_mut_ext.rs","byte_start":50219,"byte_end":50262,"line_start":43,"line_end":43,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":263},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_mut_ext.rs","byte_start":50554,"byte_end":50568,"line_start":53,"line_end":53,"column_start":8,"column_end":22},"name":"bit_xor_assign","qualname":"::traits::bits_mut_ext::BitsMutExt::bit_xor_assign","value":"pub fn bit_xor_assign<T: Bits<Block = Self::Block>>(&mut Self, T)","parent":{"krate":0,"index":254},"children":[],"decl_id":null,"docs":" Assigns the bit-wise *xor* of `self` and `other` to `self`.","sig":null,"attributes":[{"value":"/ Assigns the bit-wise *xor* of `self` and `other` to `self`.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_mut_ext.rs","byte_start":50402,"byte_end":50465,"line_start":48,"line_end":48,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_mut_ext.rs","byte_start":50470,"byte_end":50473,"line_start":49,"line_end":49,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_mut_ext.rs","byte_start":50478,"byte_end":50490,"line_start":50,"line_end":50,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_mut_ext.rs","byte_start":50495,"byte_end":50498,"line_start":51,"line_end":51,"column_start":5,"column_end":8}},{"value":"/ If `self.bit_len() != other.bit_len()`.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_mut_ext.rs","byte_start":50503,"byte_end":50546,"line_start":52,"line_end":52,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":266},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_mut_ext.rs","byte_start":50997,"byte_end":51011,"line_start":66,"line_end":66,"column_start":8,"column_end":22},"name":"bit_zip_assign","qualname":"::traits::bits_mut_ext::BitsMutExt::bit_zip_assign","value":"pub fn bit_zip_assign<T, F>(&mut Self, T, F) where T: Bits<Block =\nSelf::Block>, F: FnMut(Self::Block, Self::Block) -> Self::Block","parent":{"krate":0,"index":254},"children":[],"decl_id":null,"docs":" Performs an op-assignment from `other` to `self`.","sig":null,"attributes":[{"value":"/ Performs an op-assignment from `other` to `self`.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_mut_ext.rs","byte_start":50687,"byte_end":50740,"line_start":57,"line_end":57,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_mut_ext.rs","byte_start":50745,"byte_end":50748,"line_start":58,"line_end":58,"column_start":5,"column_end":8}},{"value":"/ In particular, the given function is used to combine each","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_mut_ext.rs","byte_start":50753,"byte_end":50814,"line_start":59,"line_end":59,"column_start":5,"column_end":66}},{"value":"/ block of `self` with a block of `other`, assigning the result","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_mut_ext.rs","byte_start":50819,"byte_end":50884,"line_start":60,"line_end":60,"column_start":5,"column_end":70}},{"value":"/ back to `self`.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_mut_ext.rs","byte_start":50889,"byte_end":50908,"line_start":61,"line_end":61,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_mut_ext.rs","byte_start":50913,"byte_end":50916,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_mut_ext.rs","byte_start":50921,"byte_end":50933,"line_start":63,"line_end":63,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_mut_ext.rs","byte_start":50938,"byte_end":50941,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ If `self.bit_len() != other.bit_len()`.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_mut_ext.rs","byte_start":50946,"byte_end":50989,"line_start":65,"line_end":65,"column_start":5,"column_end":48}}]},{"kind":"Trait","id":{"krate":0,"index":281},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_push.rs","byte_start":53054,"byte_end":53062,"line_start":5,"line_end":5,"column_start":11,"column_end":19},"name":"BitsPush","qualname":"::traits::bits_push::BitsPush","value":"BitsPush: BitsMut","parent":null,"children":[{"krate":0,"index":282},{"krate":0,"index":283},{"krate":0,"index":284},{"krate":0,"index":285}],"decl_id":null,"docs":" Bit vector operations that change the length.\n","sig":null,"attributes":[{"value":"/ Bit vector operations that change the length.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_push.rs","byte_start":52994,"byte_end":53043,"line_start":4,"line_end":4,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":282},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_push.rs","byte_start":53138,"byte_end":53146,"line_start":7,"line_end":7,"column_start":8,"column_end":16},"name":"push_bit","qualname":"::traits::bits_push::BitsPush::push_bit","value":"pub fn push_bit(&mut Self, bool)","parent":{"krate":0,"index":281},"children":[],"decl_id":null,"docs":" Adds the given bit to the end of the bit vector.\n","sig":null,"attributes":[{"value":"/ Adds the given bit to the end of the bit vector.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_push.rs","byte_start":53078,"byte_end":53130,"line_start":6,"line_end":6,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":283},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_push.rs","byte_start":53230,"byte_end":53237,"line_start":10,"line_end":10,"column_start":8,"column_end":15},"name":"pop_bit","qualname":"::traits::bits_push::BitsPush::pop_bit","value":"pub fn pop_bit(&mut Self) -> Option<bool>","parent":{"krate":0,"index":281},"children":[],"decl_id":null,"docs":" Removes and returns the last bit, if any.\n","sig":null,"attributes":[{"value":"/ Removes and returns the last bit, if any.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_push.rs","byte_start":53177,"byte_end":53222,"line_start":9,"line_end":9,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":284},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_push.rs","byte_start":53372,"byte_end":53383,"line_start":14,"line_end":14,"column_start":8,"column_end":19},"name":"align_block","qualname":"::traits::bits_push::BitsPush::align_block","value":"pub fn align_block(&mut Self, bool)","parent":{"krate":0,"index":281},"children":[],"decl_id":null,"docs":" Pushes `value` 0 or more times until the size of the bit\n vector is block-aligned.\n","sig":null,"attributes":[{"value":"/ Pushes `value` 0 or more times until the size of the bit","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_push.rs","byte_start":53271,"byte_end":53331,"line_start":12,"line_end":12,"column_start":5,"column_end":65}},{"value":"/ vector is block-aligned.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_push.rs","byte_start":53336,"byte_end":53364,"line_start":13,"line_end":13,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":285},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_push.rs","byte_start":53859,"byte_end":53869,"line_start":27,"line_end":27,"column_start":8,"column_end":18},"name":"push_block","qualname":"::traits::bits_push::BitsPush::push_block","value":"pub fn push_block(&mut Self, Self::Block)","parent":{"krate":0,"index":281},"children":[],"decl_id":null,"docs":" Pushes the given block onto the end of the bit vector.","sig":null,"attributes":[{"value":"/ Pushes the given block onto the end of the bit vector.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_push.rs","byte_start":53525,"byte_end":53583,"line_start":20,"line_end":20,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_push.rs","byte_start":53588,"byte_end":53591,"line_start":21,"line_end":21,"column_start":5,"column_end":8}},{"value":"/ If the end of the bit vector is not currently block-aligned,","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_push.rs","byte_start":53596,"byte_end":53660,"line_start":22,"line_end":22,"column_start":5,"column_end":69}},{"value":"/ it pads with 0s up to the next block before pushing.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_push.rs","byte_start":53665,"byte_end":53721,"line_start":23,"line_end":23,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_push.rs","byte_start":53726,"byte_end":53729,"line_start":24,"line_end":24,"column_start":5,"column_end":8}},{"value":"/ The default implementation pushes the block one bit at a time;","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_push.rs","byte_start":53734,"byte_end":53800,"line_start":25,"line_end":25,"column_start":5,"column_end":71}},{"value":"/ override it with something more efficient.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_push.rs","byte_start":53805,"byte_end":53851,"line_start":26,"line_end":26,"column_start":5,"column_end":51}}]},{"kind":"Trait","id":{"krate":0,"index":301},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bit_sliceable.rs","byte_start":54701,"byte_end":54713,"line_start":12,"line_end":12,"column_start":11,"column_end":23},"name":"BitSliceable","qualname":"::traits::bit_sliceable::BitSliceable","value":"BitSliceable<Range>: Bits","parent":null,"children":[{"krate":0,"index":303},{"krate":0,"index":304}],"decl_id":null,"docs":" Types that support slicing by ranges.","sig":null,"attributes":[{"value":"/ Types that support slicing by ranges.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bit_sliceable.rs","byte_start":54336,"byte_end":54377,"line_start":4,"line_end":4,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bit_sliceable.rs","byte_start":54378,"byte_end":54381,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ Note that the [`bit_slice`] method takes `self` by value, which allows","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bit_sliceable.rs","byte_start":54382,"byte_end":54456,"line_start":6,"line_end":6,"column_start":1,"column_end":75}},{"value":"/ the `Slice` associated type to refer to the lifetime of `Self` in impls","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bit_sliceable.rs","byte_start":54457,"byte_end":54532,"line_start":7,"line_end":7,"column_start":1,"column_end":76}},{"value":"/ for borrowed types. For example, the impl for `&'a BitVec<u32>` has a","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bit_sliceable.rs","byte_start":54533,"byte_end":54606,"line_start":8,"line_end":8,"column_start":1,"column_end":74}},{"value":"/ `Slice` type of `BitSlice<'a, u32>`.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bit_sliceable.rs","byte_start":54607,"byte_end":54647,"line_start":9,"line_end":9,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bit_sliceable.rs","byte_start":54648,"byte_end":54651,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ [`bit_slice`]: #tymethod.bit_slice","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bit_sliceable.rs","byte_start":54652,"byte_end":54690,"line_start":11,"line_end":11,"column_start":1,"column_end":39}}]},{"kind":"Type","id":{"krate":0,"index":303},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bit_sliceable.rs","byte_start":54778,"byte_end":54783,"line_start":14,"line_end":14,"column_start":10,"column_end":15},"name":"Slice","qualname":"::traits::bit_sliceable::BitSliceable::Slice","value":"type Slice: Bits<Block = Self::Block>;","parent":{"krate":0,"index":301},"children":[],"decl_id":null,"docs":" The type of the slice produced.\n","sig":null,"attributes":[{"value":"/ The type of the slice produced.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bit_sliceable.rs","byte_start":54733,"byte_end":54768,"line_start":13,"line_end":13,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":304},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bit_sliceable.rs","byte_start":55350,"byte_end":55359,"line_start":32,"line_end":32,"column_start":8,"column_end":17},"name":"bit_slice","qualname":"::traits::bit_sliceable::BitSliceable::bit_slice","value":"pub fn bit_slice(Self, Range) -> Self::Slice","parent":{"krate":0,"index":301},"children":[],"decl_id":null,"docs":" Slices or re-slices the given object.","sig":null,"attributes":[{"value":"/ Slices or re-slices the given object.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bit_sliceable.rs","byte_start":54817,"byte_end":54858,"line_start":16,"line_end":16,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bit_sliceable.rs","byte_start":54863,"byte_end":54866,"line_start":17,"line_end":17,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bit_sliceable.rs","byte_start":54871,"byte_end":54885,"line_start":18,"line_end":18,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bit_sliceable.rs","byte_start":54890,"byte_end":54893,"line_start":19,"line_end":19,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bit_sliceable.rs","byte_start":54898,"byte_end":54905,"line_start":20,"line_end":20,"column_start":5,"column_end":12}},{"value":"/ use bv::{BitSlice, BitSliceable};","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bit_sliceable.rs","byte_start":54910,"byte_end":54947,"line_start":21,"line_end":21,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bit_sliceable.rs","byte_start":54952,"byte_end":54955,"line_start":22,"line_end":22,"column_start":5,"column_end":8}},{"value":"/ let array = [0b01010011u16];","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bit_sliceable.rs","byte_start":54960,"byte_end":54992,"line_start":23,"line_end":23,"column_start":5,"column_end":37}},{"value":"/ let slice = BitSlice::from_slice(&array);","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bit_sliceable.rs","byte_start":54997,"byte_end":55042,"line_start":24,"line_end":24,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bit_sliceable.rs","byte_start":55047,"byte_end":55050,"line_start":25,"line_end":25,"column_start":5,"column_end":8}},{"value":"/ assert_eq!( slice.bit_slice(1..3), slice.bit_slice(4..6) );","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bit_sliceable.rs","byte_start":55055,"byte_end":55118,"line_start":26,"line_end":26,"column_start":5,"column_end":68}},{"value":"/ assert_eq!( slice.bit_slice(1..3), slice.bit_slice(6..8) );","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bit_sliceable.rs","byte_start":55123,"byte_end":55186,"line_start":27,"line_end":27,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bit_sliceable.rs","byte_start":55191,"byte_end":55194,"line_start":28,"line_end":28,"column_start":5,"column_end":8}},{"value":"/ assert_ne!( slice.bit_slice(2..4), slice.bit_slice(6..8) );","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bit_sliceable.rs","byte_start":55199,"byte_end":55262,"line_start":29,"line_end":29,"column_start":5,"column_end":68}},{"value":"/ assert_eq!( slice.bit_slice(2..4), slice.bit_slice(7..9) );","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bit_sliceable.rs","byte_start":55267,"byte_end":55330,"line_start":30,"line_end":30,"column_start":5,"column_end":68}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bit_sliceable.rs","byte_start":55335,"byte_end":55342,"line_start":31,"line_end":31,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":305},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bit_sliceable.rs","byte_start":55646,"byte_end":55661,"line_start":41,"line_end":41,"column_start":11,"column_end":26},"name":"BitSliceableMut","qualname":"::traits::bit_sliceable::BitSliceableMut","value":"BitSliceableMut<Range>: BitSliceable<Range>","parent":null,"children":[{"krate":0,"index":307}],"decl_id":null,"docs":" Types that produce mutable slices.","sig":null,"attributes":[{"value":"/ Types that produce mutable slices.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bit_sliceable.rs","byte_start":55399,"byte_end":55437,"line_start":35,"line_end":35,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bit_sliceable.rs","byte_start":55438,"byte_end":55441,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ Do not implement this trait; there is a blanket impl for all","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bit_sliceable.rs","byte_start":55442,"byte_end":55506,"line_start":37,"line_end":37,"column_start":1,"column_end":65}},{"value":"/ [`BitSliceable`] types whose associated `Slice` types implement `BitsMut`.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bit_sliceable.rs","byte_start":55507,"byte_end":55585,"line_start":38,"line_end":38,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bit_sliceable.rs","byte_start":55586,"byte_end":55589,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ [`BitSliceable`]: trait.BitSliceable.html","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bit_sliceable.rs","byte_start":55590,"byte_end":55635,"line_start":40,"line_end":40,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":307},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bit_sliceable.rs","byte_start":56001,"byte_end":56014,"line_start":48,"line_end":48,"column_start":8,"column_end":21},"name":"bit_slice_mut","qualname":"::traits::bit_sliceable::BitSliceableMut::bit_slice_mut","value":"pub fn bit_slice_mut(Self, Range) -> Self::Slice where Self: Sized","parent":{"krate":0,"index":305},"children":[],"decl_id":null,"docs":" An alias for\n [`BitSliceable::bit_slice`](trait.BitSliceable.html#tymethod.bit_slice).","sig":null,"attributes":[{"value":"/ An alias for","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bit_sliceable.rs","byte_start":55696,"byte_end":55712,"line_start":42,"line_end":42,"column_start":5,"column_end":21}},{"value":"/ [`BitSliceable::bit_slice`](trait.BitSliceable.html#tymethod.bit_slice).","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bit_sliceable.rs","byte_start":55717,"byte_end":55793,"line_start":43,"line_end":43,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bit_sliceable.rs","byte_start":55798,"byte_end":55801,"line_start":44,"line_end":44,"column_start":5,"column_end":8}},{"value":"/ This method provides no additional functionality over `bit_slice`.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bit_sliceable.rs","byte_start":55806,"byte_end":55876,"line_start":45,"line_end":45,"column_start":5,"column_end":75}},{"value":"/ However, it can be used to force auto-ref to choose a `Self` type","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bit_sliceable.rs","byte_start":55881,"byte_end":55950,"line_start":46,"line_end":46,"column_start":5,"column_end":74}},{"value":"/ that implements `BitSliceableMut`.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bit_sliceable.rs","byte_start":55955,"byte_end":55993,"line_start":47,"line_end":47,"column_start":5,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":1353},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":65598,"byte_end":65606,"line_start":170,"line_end":170,"column_start":12,"column_end":20},"name":"BitSlice","qualname":"::slice::BitSlice","value":"BitSlice {  }","parent":null,"children":[{"krate":0,"index":1356},{"krate":0,"index":1357},{"krate":0,"index":1358}],"decl_id":null,"docs":" A slice of a bit-vector; akin to `&'a [bool]` but packed.","sig":null,"attributes":[{"value":"/ A slice of a bit-vector; akin to `&'a [bool]` but packed.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":65192,"byte_end":65253,"line_start":153,"line_end":153,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":65254,"byte_end":65257,"line_start":154,"line_end":154,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":65258,"byte_end":65272,"line_start":155,"line_end":155,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":65273,"byte_end":65276,"line_start":156,"line_end":156,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":65277,"byte_end":65284,"line_start":157,"line_end":157,"column_start":1,"column_end":8}},{"value":"/ use bv::*;","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":65285,"byte_end":65299,"line_start":158,"line_end":158,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":65300,"byte_end":65303,"line_start":159,"line_end":159,"column_start":1,"column_end":4}},{"value":"/ let array = [0b00110101u16];","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":65304,"byte_end":65336,"line_start":160,"line_end":160,"column_start":1,"column_end":33}},{"value":"/ let mut slice = array.bit_slice(..8);","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":65337,"byte_end":65378,"line_start":161,"line_end":161,"column_start":1,"column_end":42}},{"value":"/ assert_eq!( slice[0], true );","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":65379,"byte_end":65412,"line_start":162,"line_end":162,"column_start":1,"column_end":34}},{"value":"/ assert_eq!( slice[1], false );","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":65413,"byte_end":65447,"line_start":163,"line_end":163,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":65448,"byte_end":65451,"line_start":164,"line_end":164,"column_start":1,"column_end":4}},{"value":"/ slice = slice.bit_slice(1..8);","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":65452,"byte_end":65486,"line_start":165,"line_end":165,"column_start":1,"column_end":35}},{"value":"/ assert_eq!( slice[0], false );","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":65487,"byte_end":65521,"line_start":166,"line_end":166,"column_start":1,"column_end":35}},{"value":"/ assert_eq!( slice[1], true );","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":65522,"byte_end":65555,"line_start":167,"line_end":167,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":65556,"byte_end":65563,"line_start":168,"line_end":168,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":447},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":66123,"byte_end":66134,"line_start":195,"line_end":195,"column_start":12,"column_end":23},"name":"BitSliceMut","qualname":"::slice::BitSliceMut","value":"BitSliceMut {  }","parent":null,"children":[{"krate":0,"index":450},{"krate":0,"index":451},{"krate":0,"index":452}],"decl_id":null,"docs":" A mutable slice of a bit-vector; akin to `&'a mut [bool]` but packed.","sig":null,"attributes":[{"value":"/ A mutable slice of a bit-vector; akin to `&'a mut [bool]` but packed.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":65705,"byte_end":65778,"line_start":176,"line_end":176,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":65779,"byte_end":65782,"line_start":177,"line_end":177,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":65783,"byte_end":65797,"line_start":178,"line_end":178,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":65798,"byte_end":65801,"line_start":179,"line_end":179,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":65802,"byte_end":65809,"line_start":180,"line_end":180,"column_start":1,"column_end":8}},{"value":"/ use bv::*;","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":65810,"byte_end":65824,"line_start":181,"line_end":181,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":65825,"byte_end":65828,"line_start":182,"line_end":182,"column_start":1,"column_end":4}},{"value":"/ let mut array = [0b00110101u16];","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":65829,"byte_end":65865,"line_start":183,"line_end":183,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":65866,"byte_end":65869,"line_start":184,"line_end":184,"column_start":1,"column_end":4}},{"value":"/ {","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":65870,"byte_end":65875,"line_start":185,"line_end":185,"column_start":1,"column_end":6}},{"value":"/     let mut slice = BitSliceMut::from_slice(&mut array);","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":65876,"byte_end":65936,"line_start":186,"line_end":186,"column_start":1,"column_end":61}},{"value":"/     assert_eq!( slice[0], true );","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":65937,"byte_end":65974,"line_start":187,"line_end":187,"column_start":1,"column_end":38}},{"value":"/     assert_eq!( slice[1], false );","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":65975,"byte_end":66013,"line_start":188,"line_end":188,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":66014,"byte_end":66017,"line_start":189,"line_end":189,"column_start":1,"column_end":4}},{"value":"/     slice.set_bit(0, false);","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":66018,"byte_end":66050,"line_start":190,"line_end":190,"column_start":1,"column_end":33}},{"value":"/ }","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":66051,"byte_end":66056,"line_start":191,"line_end":191,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":66057,"byte_end":66060,"line_start":192,"line_end":192,"column_start":1,"column_end":4}},{"value":"/ assert_eq!( array[0], 0b00110100u16 );","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":66061,"byte_end":66103,"line_start":193,"line_end":193,"column_start":1,"column_end":43}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":66104,"byte_end":66111,"line_start":194,"line_end":194,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":456},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":66833,"byte_end":66843,"line_start":219,"line_end":219,"column_start":12,"column_end":22},"name":"from_slice","qualname":"<BitSlice>::from_slice","value":"pub fn from_slice(&'a [Block]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a `BitSlice` from an array slice of blocks.","sig":null,"attributes":[{"value":"/ Creates a `BitSlice` from an array slice of blocks.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":66288,"byte_end":66343,"line_start":202,"line_end":202,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":66348,"byte_end":66351,"line_start":203,"line_end":203,"column_start":5,"column_end":8}},{"value":"/ The size is always a multiple of","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":66356,"byte_end":66392,"line_start":204,"line_end":204,"column_start":5,"column_end":41}},{"value":"/ `Block::nbits()`. If you want a different size, slice.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":66397,"byte_end":66455,"line_start":205,"line_end":205,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":66460,"byte_end":66463,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":66468,"byte_end":66482,"line_start":207,"line_end":207,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":66487,"byte_end":66490,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":66495,"byte_end":66502,"line_start":209,"line_end":209,"column_start":5,"column_end":12}},{"value":"/ use bv::{BitSlice, BitSliceable};","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":66507,"byte_end":66544,"line_start":210,"line_end":210,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":66549,"byte_end":66552,"line_start":211,"line_end":211,"column_start":5,"column_end":8}},{"value":"/ let v = vec![0b01010011u16, 0u16];","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":66557,"byte_end":66595,"line_start":212,"line_end":212,"column_start":5,"column_end":43}},{"value":"/ let slice = BitSlice::from_slice(&v).bit_slice(..7);","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":66600,"byte_end":66656,"line_start":213,"line_end":213,"column_start":5,"column_end":61}},{"value":"/ assert_eq!( slice.len(), 7 );","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":66661,"byte_end":66694,"line_start":214,"line_end":214,"column_start":5,"column_end":38}},{"value":"/ assert_eq!( slice[0], true );","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":66699,"byte_end":66732,"line_start":215,"line_end":215,"column_start":5,"column_end":38}},{"value":"/ assert_eq!( slice[1], true );","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":66737,"byte_end":66770,"line_start":216,"line_end":216,"column_start":5,"column_end":38}},{"value":"/ assert_eq!( slice[2], false );","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":66775,"byte_end":66809,"line_start":217,"line_end":217,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":66814,"byte_end":66821,"line_start":218,"line_end":218,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":457},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":67527,"byte_end":67541,"line_start":238,"line_end":238,"column_start":19,"column_end":33},"name":"from_raw_parts","qualname":"<BitSlice>::from_raw_parts","value":"pub unsafe fn from_raw_parts(*const Block, u64, u64) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a `BitSlice` from a pointer to its data, an offset where the bits start, and\n the number of available bits.","sig":null,"attributes":[{"value":"/ Creates a `BitSlice` from a pointer to its data, an offset where the bits start, and","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":67055,"byte_end":67143,"line_start":227,"line_end":227,"column_start":5,"column_end":93}},{"value":"/ the number of available bits.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":67148,"byte_end":67181,"line_start":228,"line_end":228,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":67186,"byte_end":67189,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ This is unsafe because the size of the passed-in buffer is","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":67194,"byte_end":67256,"line_start":230,"line_end":230,"column_start":5,"column_end":67}},{"value":"/ not checked. It must hold at least `offset + len` bits or the resulting behavior is","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":67261,"byte_end":67348,"line_start":231,"line_end":231,"column_start":5,"column_end":92}},{"value":"/ undefined.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":67353,"byte_end":67367,"line_start":232,"line_end":232,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":67372,"byte_end":67375,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ # Precondition","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":67380,"byte_end":67398,"line_start":234,"line_end":234,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":67403,"byte_end":67406,"line_start":235,"line_end":235,"column_start":5,"column_end":8}},{"value":"/   - the first `Block::ceil_div_nbits(len + offset)` words of `bits` safe","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":67411,"byte_end":67487,"line_start":236,"line_end":236,"column_start":5,"column_end":81}},{"value":"/     to read.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":67492,"byte_end":67508,"line_start":237,"line_end":237,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":458},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":68176,"byte_end":68179,"line_start":260,"line_end":260,"column_start":12,"column_end":15},"name":"len","qualname":"<BitSlice>::len","value":"pub fn len(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" The number of bits in the slice.","sig":null,"attributes":[{"value":"/ The number of bits in the slice.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":67860,"byte_end":67896,"line_start":247,"line_end":247,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":67901,"byte_end":67904,"line_start":248,"line_end":248,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":67909,"byte_end":67923,"line_start":249,"line_end":249,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":67928,"byte_end":67931,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":67936,"byte_end":67943,"line_start":251,"line_end":251,"column_start":5,"column_end":12}},{"value":"/ use bv::*;","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":67948,"byte_end":67962,"line_start":252,"line_end":252,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":67967,"byte_end":67970,"line_start":253,"line_end":253,"column_start":5,"column_end":8}},{"value":"/ let bv: BitVec = bit_vec![ true, true, false, true ];","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":67975,"byte_end":68032,"line_start":254,"line_end":254,"column_start":5,"column_end":62}},{"value":"/ let slice = bv.bit_slice(..3);","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":68037,"byte_end":68071,"line_start":255,"line_end":255,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":68076,"byte_end":68079,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ assert_eq!( bv.len(), 4 );","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":68084,"byte_end":68114,"line_start":257,"line_end":257,"column_start":5,"column_end":35}},{"value":"/ assert_eq!( slice.len(), 3 );","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":68119,"byte_end":68152,"line_start":258,"line_end":258,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":68157,"byte_end":68164,"line_start":259,"line_end":259,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":459},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":68608,"byte_end":68616,"line_start":278,"line_end":278,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<BitSlice>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether there are no bits in the slice.","sig":null,"attributes":[{"value":"/ Returns whether there are no bits in the slice.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":68229,"byte_end":68280,"line_start":264,"line_end":264,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":68285,"byte_end":68288,"line_start":265,"line_end":265,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":68293,"byte_end":68307,"line_start":266,"line_end":266,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":68312,"byte_end":68315,"line_start":267,"line_end":267,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":68320,"byte_end":68327,"line_start":268,"line_end":268,"column_start":5,"column_end":12}},{"value":"/ use bv::*;","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":68332,"byte_end":68346,"line_start":269,"line_end":269,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":68351,"byte_end":68354,"line_start":270,"line_end":270,"column_start":5,"column_end":8}},{"value":"/ let bv: BitVec = bit_vec![ true, true, false, true ];","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":68359,"byte_end":68416,"line_start":271,"line_end":271,"column_start":5,"column_end":62}},{"value":"/ let slice0 = bv.bit_slice(3..3);","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":68421,"byte_end":68457,"line_start":272,"line_end":272,"column_start":5,"column_end":41}},{"value":"/ let slice1 = bv.bit_slice(3..4);","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":68462,"byte_end":68498,"line_start":273,"line_end":273,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":68503,"byte_end":68506,"line_start":274,"line_end":274,"column_start":5,"column_end":8}},{"value":"/ assert!(  slice0.is_empty() );","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":68511,"byte_end":68545,"line_start":275,"line_end":275,"column_start":5,"column_end":39}},{"value":"/ assert!( !slice1.is_empty() );","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":68550,"byte_end":68584,"line_start":276,"line_end":276,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":68589,"byte_end":68596,"line_start":277,"line_end":277,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":463},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":68912,"byte_end":68922,"line_start":288,"line_end":288,"column_start":12,"column_end":22},"name":"from_slice","qualname":"<BitSliceMut>::from_slice","value":"pub fn from_slice(&mut [Block]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a `BitSliceMut` from a mutable array slice of blocks.","sig":null,"attributes":[{"value":"/ Creates a `BitSliceMut` from a mutable array slice of blocks.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":68723,"byte_end":68788,"line_start":284,"line_end":284,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":68793,"byte_end":68796,"line_start":285,"line_end":285,"column_start":5,"column_end":8}},{"value":"/ The size is always a multiple of `Block::nbits()`. If you want a different size,","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":68801,"byte_end":68885,"line_start":286,"line_end":286,"column_start":5,"column_end":89}},{"value":"/ slice.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":68890,"byte_end":68900,"line_start":287,"line_end":287,"column_start":5,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":464},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":69627,"byte_end":69641,"line_start":307,"line_end":307,"column_start":19,"column_end":33},"name":"from_raw_parts","qualname":"<BitSliceMut>::from_raw_parts","value":"pub unsafe fn from_raw_parts(*mut Block, u64, u64) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a `BitSliceMut` from a pointer to its data, an offset where the bits start, and\n the number of available bits.","sig":null,"attributes":[{"value":"/ Creates a `BitSliceMut` from a pointer to its data, an offset where the bits start, and","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":69142,"byte_end":69233,"line_start":296,"line_end":296,"column_start":5,"column_end":96}},{"value":"/ the number of available bits.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":69238,"byte_end":69271,"line_start":297,"line_end":297,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":69276,"byte_end":69279,"line_start":298,"line_end":298,"column_start":5,"column_end":8}},{"value":"/ This is unsafe because the size of the passed-in buffer is","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":69284,"byte_end":69346,"line_start":299,"line_end":299,"column_start":5,"column_end":67}},{"value":"/ not checked. It must hold at least `offset + len` bits or the resulting behavior is","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":69351,"byte_end":69438,"line_start":300,"line_end":300,"column_start":5,"column_end":92}},{"value":"/ undefined.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":69443,"byte_end":69457,"line_start":301,"line_end":301,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":69462,"byte_end":69465,"line_start":302,"line_end":302,"column_start":5,"column_end":8}},{"value":"/ # Precondition","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":69470,"byte_end":69488,"line_start":303,"line_end":303,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":69493,"byte_end":69496,"line_start":304,"line_end":304,"column_start":5,"column_end":8}},{"value":"/   - the first `Block::ceil_div_nbits(len + offset)` words of `bits` safe","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":69501,"byte_end":69577,"line_start":305,"line_end":305,"column_start":5,"column_end":81}},{"value":"/     to read and write.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":69582,"byte_end":69608,"line_start":306,"line_end":306,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":465},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":70009,"byte_end":70012,"line_start":317,"line_end":317,"column_start":12,"column_end":15},"name":"len","qualname":"<BitSliceMut>::len","value":"pub fn len(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" The number of bits in the slice.\n","sig":null,"attributes":[{"value":"/ The number of bits in the slice.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":69961,"byte_end":69997,"line_start":316,"line_end":316,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":466},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":70125,"byte_end":70133,"line_start":322,"line_end":322,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<BitSliceMut>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether there are no bits in the slice.\n","sig":null,"attributes":[{"value":"/ Returns whether there are no bits in the slice.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":70062,"byte_end":70113,"line_start":321,"line_end":321,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":467},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":70244,"byte_end":70256,"line_start":327,"line_end":327,"column_start":12,"column_end":24},"name":"as_bit_slice","qualname":"<BitSliceMut>::as_bit_slice","value":"pub fn as_bit_slice(&Self) -> BitSlice","parent":null,"children":[],"decl_id":null,"docs":" Converts a mutable bit slice to immutable.\n","sig":null,"attributes":[{"value":"/ Converts a mutable bit slice to immutable.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":70186,"byte_end":70232,"line_start":326,"line_end":326,"column_start":5,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":1438},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":84504,"byte_end":84510,"line_start":49,"line_end":49,"column_start":12,"column_end":18},"name":"BitVec","qualname":"::bit_vec::BitVec","value":"BitVec {  }","parent":null,"children":[{"krate":0,"index":1440},{"krate":0,"index":1441}],"decl_id":null,"docs":" A bit-vector, akin to `Vec<bool>` but packed.","sig":null,"attributes":[{"value":"/ A bit-vector, akin to `Vec<bool>` but packed.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":83502,"byte_end":83551,"line_start":16,"line_end":16,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":83552,"byte_end":83555,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ `BitVec` stores its bits in an array of `Block`s, where `Block` is given as a type parameter","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":83556,"byte_end":83652,"line_start":18,"line_end":18,"column_start":1,"column_end":97}},{"value":"/ that defaults to `usize`. You might find that a different `Block` size is preferable, but","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":83653,"byte_end":83746,"line_start":19,"line_end":19,"column_start":1,"column_end":94}},{"value":"/ only benchmarking will tell.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":83747,"byte_end":83779,"line_start":20,"line_end":20,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":83780,"byte_end":83783,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ Several useful methods are exported in traits, rather than inherent to `BitVec`. In","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":83784,"byte_end":83871,"line_start":22,"line_end":22,"column_start":1,"column_end":88}},{"value":"/ particular, see:","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":83872,"byte_end":83892,"line_start":23,"line_end":23,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":83893,"byte_end":83896,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/   - [`Bits::get_bit`](trait.Bits.html#method.get_bit) and","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":83897,"byte_end":83958,"line_start":25,"line_end":25,"column_start":1,"column_end":62}},{"value":"/   - [`BitsMut::set_bit`](trait.BitsMut.html#method.set_bit).","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":83959,"byte_end":84023,"line_start":26,"line_end":26,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":84024,"byte_end":84027,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ You will likely want to `use` these traits (or `bv::*`) when you use `BitVec`.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":84028,"byte_end":84110,"line_start":28,"line_end":28,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":84111,"byte_end":84114,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":84115,"byte_end":84129,"line_start":30,"line_end":30,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":84130,"byte_end":84133,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":84134,"byte_end":84141,"line_start":32,"line_end":32,"column_start":1,"column_end":8}},{"value":"/ use bv::BitVec;","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":84142,"byte_end":84161,"line_start":33,"line_end":33,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":84162,"byte_end":84165,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ let mut bv: BitVec = BitVec::new();","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":84166,"byte_end":84205,"line_start":35,"line_end":35,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(bv.len(), 0);","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":84206,"byte_end":84234,"line_start":36,"line_end":36,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":84235,"byte_end":84238,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ bv.push(true);","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":84239,"byte_end":84257,"line_start":38,"line_end":38,"column_start":1,"column_end":19}},{"value":"/ bv.push(false);","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":84258,"byte_end":84277,"line_start":39,"line_end":39,"column_start":1,"column_end":20}},{"value":"/ bv.push(true);","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":84278,"byte_end":84296,"line_start":40,"line_end":40,"column_start":1,"column_end":19}},{"value":"/ assert_eq!(bv.len(), 3);","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":84297,"byte_end":84325,"line_start":41,"line_end":41,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":84326,"byte_end":84329,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(bv[0], true);","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":84330,"byte_end":84358,"line_start":43,"line_end":43,"column_start":1,"column_end":29}},{"value":"/ assert_eq!(bv[1], false);","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":84359,"byte_end":84388,"line_start":44,"line_end":44,"column_start":1,"column_end":30}},{"value":"/ assert_eq!(bv[2], true);","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":84389,"byte_end":84417,"line_start":45,"line_end":45,"column_start":1,"column_end":29}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":84418,"byte_end":84425,"line_start":46,"line_end":46,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":843},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":86052,"byte_end":86055,"line_start":109,"line_end":109,"column_start":12,"column_end":15},"name":"new","qualname":"<BitVec<Block>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new, empty bit-vector with a capacity of one block.","sig":null,"attributes":[{"value":"/ Creates a new, empty bit-vector with a capacity of one block.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":85588,"byte_end":85653,"line_start":90,"line_end":90,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":85658,"byte_end":85661,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":85666,"byte_end":85680,"line_start":92,"line_end":92,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":85685,"byte_end":85688,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":85693,"byte_end":85700,"line_start":94,"line_end":94,"column_start":5,"column_end":12}},{"value":"/ use bv::BitVec;","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":85705,"byte_end":85724,"line_start":95,"line_end":95,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":85729,"byte_end":85732,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ let mut bv: BitVec = BitVec::new();","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":85737,"byte_end":85776,"line_start":97,"line_end":97,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(bv.len(), 0);","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":85781,"byte_end":85809,"line_start":98,"line_end":98,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":85814,"byte_end":85817,"line_start":99,"line_end":99,"column_start":5,"column_end":8}},{"value":"/ bv.push(true);","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":85822,"byte_end":85840,"line_start":100,"line_end":100,"column_start":5,"column_end":23}},{"value":"/ bv.push(false);","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":85845,"byte_end":85864,"line_start":101,"line_end":101,"column_start":5,"column_end":24}},{"value":"/ bv.push(true);","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":85869,"byte_end":85887,"line_start":102,"line_end":102,"column_start":5,"column_end":23}},{"value":"/ assert_eq!(bv.len(), 3);","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":85892,"byte_end":85920,"line_start":103,"line_end":103,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":85925,"byte_end":85928,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(bv[0], true);","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":85933,"byte_end":85961,"line_start":105,"line_end":105,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(bv[1], false);","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":85966,"byte_end":85995,"line_start":106,"line_end":106,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(bv[2], true);","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":86000,"byte_end":86028,"line_start":107,"line_end":107,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":86033,"byte_end":86040,"line_start":108,"line_end":108,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":844},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":86383,"byte_end":86396,"line_start":123,"line_end":123,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<BitVec<Block>>::with_capacity","value":"pub fn with_capacity(u64) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new, empty bit-vector with the given bit capacity.","sig":null,"attributes":[{"value":"/ Creates a new, empty bit-vector with the given bit capacity.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":86116,"byte_end":86180,"line_start":113,"line_end":113,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":86185,"byte_end":86188,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":86193,"byte_end":86207,"line_start":115,"line_end":115,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":86212,"byte_end":86215,"line_start":116,"line_end":116,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":86220,"byte_end":86227,"line_start":117,"line_end":117,"column_start":5,"column_end":12}},{"value":"/ use bv::BitVec;","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":86232,"byte_end":86251,"line_start":118,"line_end":118,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":86256,"byte_end":86259,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ let mut bv: BitVec<u16> = BitVec::with_capacity(20);","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":86264,"byte_end":86320,"line_start":120,"line_end":120,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(bv.capacity(), 32);","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":86325,"byte_end":86359,"line_start":121,"line_end":121,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":86364,"byte_end":86371,"line_start":122,"line_end":122,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":845},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":86769,"byte_end":86788,"line_start":137,"line_end":137,"column_start":12,"column_end":31},"name":"with_block_capacity","qualname":"<BitVec<Block>>::with_block_capacity","value":"pub fn with_block_capacity(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new, empty bit-vector with the given block capacity.","sig":null,"attributes":[{"value":"/ Creates a new, empty bit-vector with the given block capacity.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":86494,"byte_end":86560,"line_start":127,"line_end":127,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":86565,"byte_end":86568,"line_start":128,"line_end":128,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":86573,"byte_end":86587,"line_start":129,"line_end":129,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":86592,"byte_end":86595,"line_start":130,"line_end":130,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":86600,"byte_end":86607,"line_start":131,"line_end":131,"column_start":5,"column_end":12}},{"value":"/ use bv::BitVec;","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":86612,"byte_end":86631,"line_start":132,"line_end":132,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":86636,"byte_end":86639,"line_start":133,"line_end":133,"column_start":5,"column_end":8}},{"value":"/ let mut bv: BitVec<u16> = BitVec::with_block_capacity(8);","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":86644,"byte_end":86705,"line_start":134,"line_end":134,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(bv.capacity(), 128);","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":86710,"byte_end":86745,"line_start":135,"line_end":135,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":86750,"byte_end":86757,"line_start":136,"line_end":136,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":846},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":87277,"byte_end":87285,"line_start":156,"line_end":156,"column_start":12,"column_end":20},"name":"new_fill","qualname":"<BitVec<Block>>::new_fill","value":"pub fn new_fill(bool, u64) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new bit-vector of size `len`, filled with all 0s or 1s\n depending on `value`.","sig":null,"attributes":[{"value":"/ Creates a new bit-vector of size `len`, filled with all 0s or 1s","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":86932,"byte_end":87000,"line_start":143,"line_end":143,"column_start":5,"column_end":73}},{"value":"/ depending on `value`.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":87005,"byte_end":87030,"line_start":144,"line_end":144,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":87035,"byte_end":87038,"line_start":145,"line_end":145,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":87043,"byte_end":87057,"line_start":146,"line_end":146,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":87062,"byte_end":87065,"line_start":147,"line_end":147,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":87070,"byte_end":87077,"line_start":148,"line_end":148,"column_start":5,"column_end":12}},{"value":"/ use bv::*;","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":87082,"byte_end":87096,"line_start":149,"line_end":149,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":87101,"byte_end":87104,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ let mut bv: BitVec<u64> = BitVec::new_fill(false, 100);","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":87109,"byte_end":87168,"line_start":151,"line_end":151,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":87173,"byte_end":87176,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ assert_eq!( bv.get(0), false );","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":87181,"byte_end":87216,"line_start":153,"line_end":153,"column_start":5,"column_end":40}},{"value":"/ assert_eq!( bv.len(), 100 );","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":87221,"byte_end":87253,"line_start":154,"line_end":154,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":87258,"byte_end":87265,"line_start":155,"line_end":155,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":850},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":88399,"byte_end":88408,"line_start":188,"line_end":188,"column_start":12,"column_end":21},"name":"from_bits","qualname":"<BitVec<Block>>::from_bits","value":"pub fn from_bits<B: Bits<Block = Block>>(B) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `BitVec` from any value implementing the `Bits` trait with\n the same block type.\n","sig":null,"attributes":[{"value":"/ Creates a new `BitVec` from any value implementing the `Bits` trait with","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":88282,"byte_end":88358,"line_start":186,"line_end":186,"column_start":5,"column_end":81}},{"value":"/ the same block type.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":88363,"byte_end":88387,"line_start":187,"line_end":187,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":852},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":89475,"byte_end":89478,"line_start":227,"line_end":227,"column_start":12,"column_end":15},"name":"len","qualname":"<BitVec<Block>>::len","value":"pub fn len(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" The number of bits in the bit-vector.","sig":null,"attributes":[{"value":"/ The number of bits in the bit-vector.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":89069,"byte_end":89110,"line_start":210,"line_end":210,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":89115,"byte_end":89118,"line_start":211,"line_end":211,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":89123,"byte_end":89137,"line_start":212,"line_end":212,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":89142,"byte_end":89145,"line_start":213,"line_end":213,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":89150,"byte_end":89157,"line_start":214,"line_end":214,"column_start":5,"column_end":12}},{"value":"/ use bv::BitVec;","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":89162,"byte_end":89181,"line_start":215,"line_end":215,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":89186,"byte_end":89189,"line_start":216,"line_end":216,"column_start":5,"column_end":8}},{"value":"/ let mut bv: BitVec = BitVec::new();","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":89194,"byte_end":89233,"line_start":217,"line_end":217,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(bv.len(), 0);","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":89238,"byte_end":89266,"line_start":218,"line_end":218,"column_start":5,"column_end":33}},{"value":"/ bv.push(false);","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":89271,"byte_end":89290,"line_start":219,"line_end":219,"column_start":5,"column_end":24}},{"value":"/ assert_eq!(bv.len(), 1);","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":89295,"byte_end":89323,"line_start":220,"line_end":220,"column_start":5,"column_end":33}},{"value":"/ bv.push(false);","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":89328,"byte_end":89347,"line_start":221,"line_end":221,"column_start":5,"column_end":24}},{"value":"/ assert_eq!(bv.len(), 2);","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":89352,"byte_end":89380,"line_start":222,"line_end":222,"column_start":5,"column_end":33}},{"value":"/ bv.push(false);","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":89385,"byte_end":89404,"line_start":223,"line_end":223,"column_start":5,"column_end":24}},{"value":"/ assert_eq!(bv.len(), 3);","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":89409,"byte_end":89437,"line_start":224,"line_end":224,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":89442,"byte_end":89449,"line_start":225,"line_end":225,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":89454,"byte_end":89463,"line_start":226,"line_end":226,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":853},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":89820,"byte_end":89829,"line_start":243,"line_end":243,"column_start":12,"column_end":21},"name":"block_len","qualname":"<BitVec<Block>>::block_len","value":"pub fn block_len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The number of blocks used by this bit-vector.","sig":null,"attributes":[{"value":"/ The number of blocks used by this bit-vector.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":89523,"byte_end":89572,"line_start":231,"line_end":231,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":89577,"byte_end":89580,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":89585,"byte_end":89599,"line_start":233,"line_end":233,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":89604,"byte_end":89607,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":89612,"byte_end":89619,"line_start":235,"line_end":235,"column_start":5,"column_end":12}},{"value":"/ use bv::*;","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":89624,"byte_end":89638,"line_start":236,"line_end":236,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":89643,"byte_end":89646,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ let mut bv: BitVec<u64> = BitVec::new_fill(false, 100);","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":89651,"byte_end":89710,"line_start":238,"line_end":238,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":89715,"byte_end":89718,"line_start":239,"line_end":239,"column_start":5,"column_end":8}},{"value":"/ assert_eq!( bv.len(), 100 );","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":89723,"byte_end":89755,"line_start":240,"line_end":240,"column_start":5,"column_end":37}},{"value":"/ assert_eq!( bv.block_len(), 2 );","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":89760,"byte_end":89796,"line_start":241,"line_end":241,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":89801,"byte_end":89808,"line_start":242,"line_end":242,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":854},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":90372,"byte_end":90380,"line_start":264,"line_end":264,"column_start":12,"column_end":20},"name":"capacity","qualname":"<BitVec<Block>>::capacity","value":"pub fn capacity(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" The capacity of the bit-vector in bits.","sig":null,"attributes":[{"value":"/ The capacity of the bit-vector in bits.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":89901,"byte_end":89944,"line_start":247,"line_end":247,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":89949,"byte_end":89952,"line_start":248,"line_end":248,"column_start":5,"column_end":8}},{"value":"/ This is the number of bits that can be held without reallocating.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":89957,"byte_end":90026,"line_start":249,"line_end":249,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":90031,"byte_end":90034,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":90039,"byte_end":90053,"line_start":251,"line_end":251,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":90058,"byte_end":90061,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":90066,"byte_end":90073,"line_start":253,"line_end":253,"column_start":5,"column_end":12}},{"value":"/ use bv::*;","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":90078,"byte_end":90092,"line_start":254,"line_end":254,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":90097,"byte_end":90100,"line_start":255,"line_end":255,"column_start":5,"column_end":8}},{"value":"/ let bv: BitVec<u64> = bit_vec![false; 100];","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":90105,"byte_end":90152,"line_start":256,"line_end":256,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":90157,"byte_end":90160,"line_start":257,"line_end":257,"column_start":5,"column_end":8}},{"value":"/ assert_eq!( bv.len(), 100 );","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":90165,"byte_end":90197,"line_start":258,"line_end":258,"column_start":5,"column_end":37}},{"value":"/ assert_eq!( bv.capacity(), 128 );","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":90202,"byte_end":90239,"line_start":259,"line_end":259,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":90244,"byte_end":90251,"line_start":260,"line_end":260,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":90256,"byte_end":90259,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ Note that this example holds because `bit_vec!` does not introduces excess","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":90264,"byte_end":90342,"line_start":262,"line_end":262,"column_start":5,"column_end":83}},{"value":"/ capacity.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":90347,"byte_end":90360,"line_start":263,"line_end":263,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":855},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":90938,"byte_end":90952,"line_start":285,"line_end":285,"column_start":12,"column_end":26},"name":"block_capacity","qualname":"<BitVec<Block>>::block_capacity","value":"pub fn block_capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The capacity of the bit-vector in blocks.","sig":null,"attributes":[{"value":"/ The capacity of the bit-vector in blocks.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":90456,"byte_end":90501,"line_start":268,"line_end":268,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":90506,"byte_end":90509,"line_start":269,"line_end":269,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":90514,"byte_end":90528,"line_start":270,"line_end":270,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":90533,"byte_end":90536,"line_start":271,"line_end":271,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":90541,"byte_end":90548,"line_start":272,"line_end":272,"column_start":5,"column_end":12}},{"value":"/ use bv::*;","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":90553,"byte_end":90567,"line_start":273,"line_end":273,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":90572,"byte_end":90575,"line_start":274,"line_end":274,"column_start":5,"column_end":8}},{"value":"/ let bv: BitVec<u64> = BitVec::with_capacity(250);","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":90580,"byte_end":90633,"line_start":275,"line_end":275,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":90638,"byte_end":90641,"line_start":276,"line_end":276,"column_start":5,"column_end":8}},{"value":"/ assert_eq!( bv.len(), 0 );","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":90646,"byte_end":90676,"line_start":277,"line_end":277,"column_start":5,"column_end":35}},{"value":"/ assert_eq!( bv.block_len(), 0 );","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":90681,"byte_end":90717,"line_start":278,"line_end":278,"column_start":5,"column_end":41}},{"value":"/ assert_eq!( bv.capacity(), 256 );","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":90722,"byte_end":90759,"line_start":279,"line_end":279,"column_start":5,"column_end":42}},{"value":"/ assert_eq!( bv.block_capacity(), 4 );","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":90764,"byte_end":90805,"line_start":280,"line_end":280,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":90810,"byte_end":90817,"line_start":281,"line_end":281,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":90822,"byte_end":90825,"line_start":282,"line_end":282,"column_start":5,"column_end":8}},{"value":"/ Note that this example holds because `bit_vec!` does not introduces excess","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":90830,"byte_end":90908,"line_start":283,"line_end":283,"column_start":5,"column_end":83}},{"value":"/ capacity.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":90913,"byte_end":90926,"line_start":284,"line_end":284,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":856},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":91413,"byte_end":91420,"line_start":303,"line_end":303,"column_start":12,"column_end":19},"name":"reserve","qualname":"<BitVec<Block>>::reserve","value":"pub fn reserve(&mut Self, u64)","parent":null,"children":[],"decl_id":null,"docs":" Adjust the capacity to hold at least `additional` additional bits.","sig":null,"attributes":[{"value":"/ Adjust the capacity to hold at least `additional` additional bits.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":91006,"byte_end":91076,"line_start":289,"line_end":289,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":91081,"byte_end":91084,"line_start":290,"line_end":290,"column_start":5,"column_end":8}},{"value":"/ May reserve more to avoid frequent reallocations.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":91089,"byte_end":91142,"line_start":291,"line_end":291,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":91147,"byte_end":91150,"line_start":292,"line_end":292,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":91155,"byte_end":91169,"line_start":293,"line_end":293,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":91174,"byte_end":91177,"line_start":294,"line_end":294,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":91182,"byte_end":91189,"line_start":295,"line_end":295,"column_start":5,"column_end":12}},{"value":"/ use bv::*;","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":91194,"byte_end":91208,"line_start":296,"line_end":296,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":91213,"byte_end":91216,"line_start":297,"line_end":297,"column_start":5,"column_end":8}},{"value":"/ let mut bv: BitVec<u32> = bit_vec![ false, false, true ];","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":91221,"byte_end":91282,"line_start":298,"line_end":298,"column_start":5,"column_end":66}},{"value":"/ assert_eq!( bv.capacity(), 32 );","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":91287,"byte_end":91323,"line_start":299,"line_end":299,"column_start":5,"column_end":41}},{"value":"/ bv.reserve(100);","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":91328,"byte_end":91348,"line_start":300,"line_end":300,"column_start":5,"column_end":25}},{"value":"/ assert!( bv.capacity() >= 103 );","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":91353,"byte_end":91389,"line_start":301,"line_end":301,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":91394,"byte_end":91401,"line_start":302,"line_end":302,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":857},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":92069,"byte_end":92082,"line_start":325,"line_end":325,"column_start":12,"column_end":25},"name":"block_reserve","qualname":"<BitVec<Block>>::block_reserve","value":"pub fn block_reserve(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Adjust the capacity to hold at least `additional` additional blocks.","sig":null,"attributes":[{"value":"/ Adjust the capacity to hold at least `additional` additional blocks.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":91647,"byte_end":91719,"line_start":311,"line_end":311,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":91724,"byte_end":91727,"line_start":312,"line_end":312,"column_start":5,"column_end":8}},{"value":"/ May reserve more to avoid frequent reallocations.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":91732,"byte_end":91785,"line_start":313,"line_end":313,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":91790,"byte_end":91793,"line_start":314,"line_end":314,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":91798,"byte_end":91812,"line_start":315,"line_end":315,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":91817,"byte_end":91820,"line_start":316,"line_end":316,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":91825,"byte_end":91832,"line_start":317,"line_end":317,"column_start":5,"column_end":12}},{"value":"/ use bv::*;","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":91837,"byte_end":91851,"line_start":318,"line_end":318,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":91856,"byte_end":91859,"line_start":319,"line_end":319,"column_start":5,"column_end":8}},{"value":"/ let mut bv: BitVec<u32> = bit_vec![ false, false, true ];","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":91864,"byte_end":91925,"line_start":320,"line_end":320,"column_start":5,"column_end":66}},{"value":"/ assert_eq!( bv.block_capacity(), 1 );","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":91930,"byte_end":91971,"line_start":321,"line_end":321,"column_start":5,"column_end":46}},{"value":"/ bv.block_reserve(3);","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":91976,"byte_end":92000,"line_start":322,"line_end":322,"column_start":5,"column_end":29}},{"value":"/ assert!( bv.block_capacity() >= 4 );","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":92005,"byte_end":92045,"line_start":323,"line_end":323,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":92050,"byte_end":92057,"line_start":324,"line_end":324,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":858},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":92677,"byte_end":92690,"line_start":345,"line_end":345,"column_start":12,"column_end":25},"name":"reserve_exact","qualname":"<BitVec<Block>>::reserve_exact","value":"pub fn reserve_exact(&mut Self, u64)","parent":null,"children":[],"decl_id":null,"docs":" Adjust the capacity to hold at least `additional` additional bits.","sig":null,"attributes":[{"value":"/ Adjust the capacity to hold at least `additional` additional bits.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":92329,"byte_end":92399,"line_start":333,"line_end":333,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":92404,"byte_end":92407,"line_start":334,"line_end":334,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":92412,"byte_end":92426,"line_start":335,"line_end":335,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":92431,"byte_end":92434,"line_start":336,"line_end":336,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":92439,"byte_end":92446,"line_start":337,"line_end":337,"column_start":5,"column_end":12}},{"value":"/ use bv::*;","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":92451,"byte_end":92465,"line_start":338,"line_end":338,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":92470,"byte_end":92473,"line_start":339,"line_end":339,"column_start":5,"column_end":8}},{"value":"/ let mut bv: BitVec<u32> = bit_vec![ false, false, true ];","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":92478,"byte_end":92539,"line_start":340,"line_end":340,"column_start":5,"column_end":66}},{"value":"/ assert_eq!( bv.capacity(), 32 );","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":92544,"byte_end":92580,"line_start":341,"line_end":341,"column_start":5,"column_end":41}},{"value":"/ bv.reserve_exact(100);","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":92585,"byte_end":92611,"line_start":342,"line_end":342,"column_start":5,"column_end":31}},{"value":"/ assert_eq!( bv.capacity(), 128 );","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":92616,"byte_end":92653,"line_start":343,"line_end":343,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":92658,"byte_end":92665,"line_start":344,"line_end":344,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":859},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":93261,"byte_end":93280,"line_start":364,"line_end":364,"column_start":12,"column_end":31},"name":"block_reserve_exact","qualname":"<BitVec<Block>>::block_reserve_exact","value":"pub fn block_reserve_exact(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Adjusts the capacity to at least `additional` blocks beyond those used.","sig":null,"attributes":[{"value":"/ Adjusts the capacity to at least `additional` blocks beyond those used.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":92895,"byte_end":92970,"line_start":352,"line_end":352,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":92975,"byte_end":92978,"line_start":353,"line_end":353,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":92983,"byte_end":92997,"line_start":354,"line_end":354,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":93002,"byte_end":93005,"line_start":355,"line_end":355,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":93010,"byte_end":93017,"line_start":356,"line_end":356,"column_start":5,"column_end":12}},{"value":"/ use bv::*;","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":93022,"byte_end":93036,"line_start":357,"line_end":357,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":93041,"byte_end":93044,"line_start":358,"line_end":358,"column_start":5,"column_end":8}},{"value":"/ let mut bv: BitVec<u32> = bit_vec![ false, false, true ];","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":93049,"byte_end":93110,"line_start":359,"line_end":359,"column_start":5,"column_end":66}},{"value":"/ assert_eq!( bv.block_capacity(), 1 );","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":93115,"byte_end":93156,"line_start":360,"line_end":360,"column_start":5,"column_end":46}},{"value":"/ bv.block_reserve_exact(3);","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":93161,"byte_end":93191,"line_start":361,"line_end":361,"column_start":5,"column_end":35}},{"value":"/ assert_eq!( bv.block_capacity(), 4 );","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":93196,"byte_end":93237,"line_start":362,"line_end":362,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":93242,"byte_end":93249,"line_start":363,"line_end":363,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":860},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":93879,"byte_end":93892,"line_start":389,"line_end":389,"column_start":12,"column_end":25},"name":"shrink_to_fit","qualname":"<BitVec<Block>>::shrink_to_fit","value":"pub fn shrink_to_fit(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Shrinks the capacity of the vector as much as possible.","sig":null,"attributes":[{"value":"/ Shrinks the capacity of the vector as much as possible.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":93470,"byte_end":93529,"line_start":371,"line_end":371,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":93534,"byte_end":93537,"line_start":372,"line_end":372,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":93542,"byte_end":93556,"line_start":373,"line_end":373,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":93561,"byte_end":93564,"line_start":374,"line_end":374,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":93569,"byte_end":93576,"line_start":375,"line_end":375,"column_start":5,"column_end":12}},{"value":"/ use bv::BitVec;","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":93581,"byte_end":93600,"line_start":376,"line_end":376,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":93605,"byte_end":93608,"line_start":377,"line_end":377,"column_start":5,"column_end":8}},{"value":"/ let mut bv: BitVec<u8> = BitVec::new();","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":93613,"byte_end":93656,"line_start":378,"line_end":378,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":93661,"byte_end":93664,"line_start":379,"line_end":379,"column_start":5,"column_end":8}},{"value":"/ for i in 0 .. 23 {","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":93669,"byte_end":93691,"line_start":380,"line_end":380,"column_start":5,"column_end":27}},{"value":"/     bv.push(i % 3 == 0);","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":93696,"byte_end":93724,"line_start":381,"line_end":381,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":93729,"byte_end":93734,"line_start":382,"line_end":382,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":93739,"byte_end":93742,"line_start":383,"line_end":383,"column_start":5,"column_end":8}},{"value":"/ assert!(bv.capacity() >= 24);","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":93747,"byte_end":93780,"line_start":384,"line_end":384,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":93785,"byte_end":93788,"line_start":385,"line_end":385,"column_start":5,"column_end":8}},{"value":"/ bv.shrink_to_fit();","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":93793,"byte_end":93816,"line_start":386,"line_end":386,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(bv.capacity(), 24);","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":93821,"byte_end":93855,"line_start":387,"line_end":387,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":93860,"byte_end":93867,"line_start":388,"line_end":388,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":861},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":94480,"byte_end":94496,"line_start":411,"line_end":411,"column_start":12,"column_end":28},"name":"into_boxed_slice","qualname":"<BitVec<Block>>::into_boxed_slice","value":"pub fn into_boxed_slice(Self) -> Box<[Block]>","parent":null,"children":[],"decl_id":null,"docs":" Converts the vector into `Box<[Block]>`.","sig":null,"attributes":[{"value":"/ Converts the vector into `Box<[Block]>`.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":94056,"byte_end":94100,"line_start":396,"line_end":396,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":94105,"byte_end":94108,"line_start":397,"line_end":397,"column_start":5,"column_end":8}},{"value":"/ Note that this will *not* drop any excess capacity.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":94113,"byte_end":94168,"line_start":398,"line_end":398,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":94173,"byte_end":94176,"line_start":399,"line_end":399,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":94181,"byte_end":94195,"line_start":400,"line_end":400,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":94200,"byte_end":94203,"line_start":401,"line_end":401,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":94208,"byte_end":94215,"line_start":402,"line_end":402,"column_start":5,"column_end":12}},{"value":"/ use bv::*;","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":94220,"byte_end":94234,"line_start":403,"line_end":403,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":94239,"byte_end":94242,"line_start":404,"line_end":404,"column_start":5,"column_end":8}},{"value":"/ let bv: BitVec<u8> = bit_vec![true, true, false, false, true, false, true, false];","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":94247,"byte_end":94333,"line_start":405,"line_end":405,"column_start":5,"column_end":91}},{"value":"/ let bs = bv.into_boxed_slice();","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":94338,"byte_end":94373,"line_start":406,"line_end":406,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":94378,"byte_end":94381,"line_start":407,"line_end":407,"column_start":5,"column_end":8}},{"value":"/ assert!( bs.len() >= 1 );","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":94386,"byte_end":94415,"line_start":408,"line_end":408,"column_start":5,"column_end":34}},{"value":"/ assert_eq!( bs[0], 0b01010011 );","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":94420,"byte_end":94456,"line_start":409,"line_end":409,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":94461,"byte_end":94468,"line_start":410,"line_end":410,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":862},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":95152,"byte_end":95160,"line_start":435,"line_end":435,"column_start":12,"column_end":20},"name":"truncate","qualname":"<BitVec<Block>>::truncate","value":"pub fn truncate(&mut Self, u64)","parent":null,"children":[],"decl_id":null,"docs":" Shortens the vector, keeping the first `len` elements and dropping the rest.","sig":null,"attributes":[{"value":"/ Shortens the vector, keeping the first `len` elements and dropping the rest.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":94569,"byte_end":94649,"line_start":415,"line_end":415,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":94654,"byte_end":94657,"line_start":416,"line_end":416,"column_start":5,"column_end":8}},{"value":"/ If `len` is greater than the vector's current length, this has no effect.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":94662,"byte_end":94739,"line_start":417,"line_end":417,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":94744,"byte_end":94747,"line_start":418,"line_end":418,"column_start":5,"column_end":8}},{"value":"/ Note that this method has no effect on the capacity of the bit-vector.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":94752,"byte_end":94826,"line_start":419,"line_end":419,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":94831,"byte_end":94834,"line_start":420,"line_end":420,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":94839,"byte_end":94853,"line_start":421,"line_end":421,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":94858,"byte_end":94861,"line_start":422,"line_end":422,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":94866,"byte_end":94873,"line_start":423,"line_end":423,"column_start":5,"column_end":12}},{"value":"/ use bv::*;","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":94878,"byte_end":94892,"line_start":424,"line_end":424,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":94897,"byte_end":94900,"line_start":425,"line_end":425,"column_start":5,"column_end":8}},{"value":"/ let mut v1: BitVec = bit_vec![ true, true, false, false ];","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":94905,"byte_end":94967,"line_start":426,"line_end":426,"column_start":5,"column_end":67}},{"value":"/ let     v2: BitVec = bit_vec![ true, true ];","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":94972,"byte_end":95020,"line_start":427,"line_end":427,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":95025,"byte_end":95028,"line_start":428,"line_end":428,"column_start":5,"column_end":8}},{"value":"/ assert_ne!( v1, v2 );","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":95033,"byte_end":95058,"line_start":429,"line_end":429,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":95063,"byte_end":95066,"line_start":430,"line_end":430,"column_start":5,"column_end":8}},{"value":"/ v1.truncate(2);","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":95071,"byte_end":95090,"line_start":431,"line_end":431,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":95095,"byte_end":95098,"line_start":432,"line_end":432,"column_start":5,"column_end":8}},{"value":"/ assert_eq!( v1, v2 );","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":95103,"byte_end":95128,"line_start":433,"line_end":433,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":95133,"byte_end":95140,"line_start":434,"line_end":434,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":863},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":95732,"byte_end":95738,"line_start":458,"line_end":458,"column_start":12,"column_end":18},"name":"resize","qualname":"<BitVec<Block>>::resize","value":"pub fn resize(&mut Self, u64, bool)","parent":null,"children":[],"decl_id":null,"docs":" Resizes the bit-vector, filling with `value` if it has to grow.","sig":null,"attributes":[{"value":"/ Resizes the bit-vector, filling with `value` if it has to grow.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":95261,"byte_end":95328,"line_start":441,"line_end":441,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":95333,"byte_end":95336,"line_start":442,"line_end":442,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":95341,"byte_end":95355,"line_start":443,"line_end":443,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":95360,"byte_end":95363,"line_start":444,"line_end":444,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":95368,"byte_end":95375,"line_start":445,"line_end":445,"column_start":5,"column_end":12}},{"value":"/ use bv::*;","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":95380,"byte_end":95394,"line_start":446,"line_end":446,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":95399,"byte_end":95402,"line_start":447,"line_end":447,"column_start":5,"column_end":8}},{"value":"/ let     v1: BitVec = bit_vec![ true, true, false, false ];","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":95407,"byte_end":95469,"line_start":448,"line_end":448,"column_start":5,"column_end":67}},{"value":"/ let mut v2: BitVec = bit_vec![ true, true ];","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":95474,"byte_end":95522,"line_start":449,"line_end":449,"column_start":5,"column_end":53}},{"value":"/ let mut v3: BitVec = bit_vec![ true, true ];","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":95527,"byte_end":95575,"line_start":450,"line_end":450,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":95580,"byte_end":95583,"line_start":451,"line_end":451,"column_start":5,"column_end":8}},{"value":"/ v2.resize(4, false);","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":95588,"byte_end":95612,"line_start":452,"line_end":452,"column_start":5,"column_end":29}},{"value":"/ v3.resize(4, true);","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":95617,"byte_end":95640,"line_start":453,"line_end":453,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":95645,"byte_end":95648,"line_start":454,"line_end":454,"column_start":5,"column_end":8}},{"value":"/ assert_eq!( v1, v2 );","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":95653,"byte_end":95678,"line_start":455,"line_end":455,"column_start":5,"column_end":30}},{"value":"/ assert_ne!( v1, v3 );","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":95683,"byte_end":95708,"line_start":456,"line_end":456,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":95713,"byte_end":95720,"line_start":457,"line_end":457,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":864},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":96756,"byte_end":96764,"line_start":497,"line_end":497,"column_start":12,"column_end":20},"name":"as_slice","qualname":"<BitVec<Block>>::as_slice","value":"pub fn as_slice(&Self) -> BitSlice<, Block>","parent":null,"children":[],"decl_id":null,"docs":" Gets a slice to a `BitVec`.","sig":null,"attributes":[{"value":"/ Gets a slice to a `BitVec`.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":96377,"byte_end":96408,"line_start":482,"line_end":482,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":96413,"byte_end":96416,"line_start":483,"line_end":483,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":96421,"byte_end":96435,"line_start":484,"line_end":484,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":96440,"byte_end":96443,"line_start":485,"line_end":485,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":96448,"byte_end":96455,"line_start":486,"line_end":486,"column_start":5,"column_end":12}},{"value":"/ use bv::*;","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":96460,"byte_end":96474,"line_start":487,"line_end":487,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":96479,"byte_end":96482,"line_start":488,"line_end":488,"column_start":5,"column_end":8}},{"value":"/ let bv: BitVec = bit_vec![true, false, true];","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":96487,"byte_end":96536,"line_start":489,"line_end":489,"column_start":5,"column_end":54}},{"value":"/ let slice = bv.as_slice();","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":96541,"byte_end":96571,"line_start":490,"line_end":490,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":96576,"byte_end":96579,"line_start":491,"line_end":491,"column_start":5,"column_end":8}},{"value":"/ assert_eq!( slice.len(), 3 );","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":96584,"byte_end":96617,"line_start":492,"line_end":492,"column_start":5,"column_end":38}},{"value":"/ assert_eq!( slice[0], true );","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":96622,"byte_end":96655,"line_start":493,"line_end":493,"column_start":5,"column_end":38}},{"value":"/ assert_eq!( slice[1], false );","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":96660,"byte_end":96694,"line_start":494,"line_end":494,"column_start":5,"column_end":39}},{"value":"/ assert_eq!( slice[2], true );","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":96699,"byte_end":96732,"line_start":495,"line_end":495,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":96737,"byte_end":96744,"line_start":496,"line_end":496,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":865},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":97543,"byte_end":97555,"line_start":523,"line_end":523,"column_start":12,"column_end":24},"name":"as_mut_slice","qualname":"<BitVec<Block>>::as_mut_slice","value":"pub fn as_mut_slice(&mut Self) -> BitSliceMut<, Block>","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable slice to a `BitVec`.","sig":null,"attributes":[{"value":"/ Gets a mutable slice to a `BitVec`.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":97194,"byte_end":97233,"line_start":507,"line_end":507,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":97238,"byte_end":97241,"line_start":508,"line_end":508,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":97246,"byte_end":97260,"line_start":509,"line_end":509,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":97265,"byte_end":97268,"line_start":510,"line_end":510,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":97273,"byte_end":97280,"line_start":511,"line_end":511,"column_start":5,"column_end":12}},{"value":"/ use bv::*;","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":97285,"byte_end":97299,"line_start":512,"line_end":512,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":97304,"byte_end":97307,"line_start":513,"line_end":513,"column_start":5,"column_end":8}},{"value":"/ let mut bv: BitVec = bit_vec![true, false, true];","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":97312,"byte_end":97365,"line_start":514,"line_end":514,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":97370,"byte_end":97373,"line_start":515,"line_end":515,"column_start":5,"column_end":8}},{"value":"/ {","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":97378,"byte_end":97383,"line_start":516,"line_end":516,"column_start":5,"column_end":10}},{"value":"/     let mut slice = bv.as_mut_slice();","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":97388,"byte_end":97430,"line_start":517,"line_end":517,"column_start":5,"column_end":47}},{"value":"/     slice.set_bit(1, true);","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":97435,"byte_end":97466,"line_start":518,"line_end":518,"column_start":5,"column_end":36}},{"value":"/ }","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":97471,"byte_end":97476,"line_start":519,"line_end":519,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":97481,"byte_end":97484,"line_start":520,"line_end":520,"column_start":5,"column_end":8}},{"value":"/ assert_eq!( bv[1], true );","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":97489,"byte_end":97519,"line_start":521,"line_end":521,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":97524,"byte_end":97531,"line_start":522,"line_end":522,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":866},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":98047,"byte_end":98050,"line_start":539,"line_end":539,"column_start":12,"column_end":15},"name":"get","qualname":"<BitVec<Block>>::get","value":"pub fn get(&Self, u64) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Gets the value of the bit at the given position.","sig":null,"attributes":[{"value":"/ Gets the value of the bit at the given position.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":97783,"byte_end":97835,"line_start":530,"line_end":530,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":97840,"byte_end":97843,"line_start":531,"line_end":531,"column_start":5,"column_end":8}},{"value":"/ This is an alias for [`Bits::get_bit`].","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":97848,"byte_end":97891,"line_start":532,"line_end":532,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":97896,"byte_end":97899,"line_start":533,"line_end":533,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":97904,"byte_end":97916,"line_start":534,"line_end":534,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":97921,"byte_end":97924,"line_start":535,"line_end":535,"column_start":5,"column_end":8}},{"value":"/ If the position is out of bounds.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":97929,"byte_end":97966,"line_start":536,"line_end":536,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":97971,"byte_end":97974,"line_start":537,"line_end":537,"column_start":5,"column_end":8}},{"value":"/ [`Bits::get_bit`]: ../trait.Bits.html#get_bit.method","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":97979,"byte_end":98035,"line_start":538,"line_end":538,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":867},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":98398,"byte_end":98401,"line_start":552,"line_end":552,"column_start":12,"column_end":15},"name":"set","qualname":"<BitVec<Block>>::set","value":"pub fn set(&mut Self, u64, bool)","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the bit at the given position.","sig":null,"attributes":[{"value":"/ Sets the value of the bit at the given position.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":98125,"byte_end":98177,"line_start":543,"line_end":543,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":98182,"byte_end":98185,"line_start":544,"line_end":544,"column_start":5,"column_end":8}},{"value":"/ This is an alias for [`BitsMut::set_bit`].","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":98190,"byte_end":98236,"line_start":545,"line_end":545,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":98241,"byte_end":98244,"line_start":546,"line_end":546,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":98249,"byte_end":98261,"line_start":547,"line_end":547,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":98266,"byte_end":98269,"line_start":548,"line_end":548,"column_start":5,"column_end":8}},{"value":"/ If the position is out of bounds.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":98274,"byte_end":98311,"line_start":549,"line_end":549,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":98316,"byte_end":98319,"line_start":550,"line_end":550,"column_start":5,"column_end":8}},{"value":"/ [`BitsMut::set_bit`]: ../trait.BitsMut.html#set_bit.method","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":98324,"byte_end":98386,"line_start":551,"line_end":551,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":868},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":99150,"byte_end":99154,"line_start":581,"line_end":581,"column_start":12,"column_end":16},"name":"push","qualname":"<BitVec<Block>>::push","value":"pub fn push(&mut Self, bool)","parent":null,"children":[],"decl_id":null,"docs":" Adds the given `bool` to the end of the bit-vector.","sig":null,"attributes":[{"value":"/ Adds the given `bool` to the end of the bit-vector.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":98493,"byte_end":98548,"line_start":556,"line_end":556,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":98553,"byte_end":98556,"line_start":557,"line_end":557,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":98561,"byte_end":98575,"line_start":558,"line_end":558,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":98580,"byte_end":98583,"line_start":559,"line_end":559,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":98588,"byte_end":98595,"line_start":560,"line_end":560,"column_start":5,"column_end":12}},{"value":"/ use bv::*;","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":98600,"byte_end":98614,"line_start":561,"line_end":561,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":98619,"byte_end":98622,"line_start":562,"line_end":562,"column_start":5,"column_end":8}},{"value":"/ let mut bv0: BitVec = bit_vec![ ];","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":98627,"byte_end":98665,"line_start":563,"line_end":563,"column_start":5,"column_end":43}},{"value":"/ let     bv1: BitVec = bit_vec![ true ];","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":98670,"byte_end":98713,"line_start":564,"line_end":564,"column_start":5,"column_end":48}},{"value":"/ let     bv2: BitVec = bit_vec![ true, false ];","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":98718,"byte_end":98768,"line_start":565,"line_end":565,"column_start":5,"column_end":55}},{"value":"/ let     bv3: BitVec = bit_vec![ true, false, true ];","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":98773,"byte_end":98829,"line_start":566,"line_end":566,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":98834,"byte_end":98837,"line_start":567,"line_end":567,"column_start":5,"column_end":8}},{"value":"/ assert_ne!( bv0, bv1 );","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":98842,"byte_end":98869,"line_start":568,"line_end":568,"column_start":5,"column_end":32}},{"value":"/ assert_ne!( bv0, bv2 );","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":98874,"byte_end":98901,"line_start":569,"line_end":569,"column_start":5,"column_end":32}},{"value":"/ assert_ne!( bv0, bv3 );","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":98906,"byte_end":98933,"line_start":570,"line_end":570,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":98938,"byte_end":98941,"line_start":571,"line_end":571,"column_start":5,"column_end":8}},{"value":"/ bv0.push(true);","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":98946,"byte_end":98965,"line_start":572,"line_end":572,"column_start":5,"column_end":24}},{"value":"/ assert_eq!( bv0, bv1 );","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":98970,"byte_end":98997,"line_start":573,"line_end":573,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":99002,"byte_end":99005,"line_start":574,"line_end":574,"column_start":5,"column_end":8}},{"value":"/ bv0.push(false);","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":99010,"byte_end":99030,"line_start":575,"line_end":575,"column_start":5,"column_end":25}},{"value":"/ assert_eq!( bv0, bv2 );","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":99035,"byte_end":99062,"line_start":576,"line_end":576,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":99067,"byte_end":99070,"line_start":577,"line_end":577,"column_start":5,"column_end":8}},{"value":"/ bv0.push(true);","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":99075,"byte_end":99094,"line_start":578,"line_end":578,"column_start":5,"column_end":24}},{"value":"/ assert_eq!( bv0, bv3 );","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":99099,"byte_end":99126,"line_start":579,"line_end":579,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":99131,"byte_end":99138,"line_start":580,"line_end":580,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":869},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":99727,"byte_end":99730,"line_start":601,"line_end":601,"column_start":12,"column_end":15},"name":"pop","qualname":"<BitVec<Block>>::pop","value":"pub fn pop(&mut Self) -> Option<bool>","parent":null,"children":[],"decl_id":null,"docs":" Removes and returns the last element of the bit-vector, or `None` if empty.","sig":null,"attributes":[{"value":"/ Removes and returns the last element of the bit-vector, or `None` if empty.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":99319,"byte_end":99398,"line_start":588,"line_end":588,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":99403,"byte_end":99406,"line_start":589,"line_end":589,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":99411,"byte_end":99425,"line_start":590,"line_end":590,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":99430,"byte_end":99433,"line_start":591,"line_end":591,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":99438,"byte_end":99445,"line_start":592,"line_end":592,"column_start":5,"column_end":12}},{"value":"/ use bv::*;","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":99450,"byte_end":99464,"line_start":593,"line_end":593,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":99469,"byte_end":99472,"line_start":594,"line_end":594,"column_start":5,"column_end":8}},{"value":"/ let mut bv: BitVec = bit_vec![ true, false, true ];","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":99477,"byte_end":99532,"line_start":595,"line_end":595,"column_start":5,"column_end":60}},{"value":"/ assert_eq!( bv.pop(), Some(true) );","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":99537,"byte_end":99576,"line_start":596,"line_end":596,"column_start":5,"column_end":44}},{"value":"/ assert_eq!( bv.pop(), Some(false) );","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":99581,"byte_end":99621,"line_start":597,"line_end":597,"column_start":5,"column_end":45}},{"value":"/ assert_eq!( bv.pop(), Some(true) );","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":99626,"byte_end":99665,"line_start":598,"line_end":598,"column_start":5,"column_end":44}},{"value":"/ assert_eq!( bv.pop(), None );","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":99670,"byte_end":99703,"line_start":599,"line_end":599,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":99708,"byte_end":99715,"line_start":600,"line_end":600,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":870},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":100399,"byte_end":100404,"line_start":628,"line_end":628,"column_start":12,"column_end":17},"name":"clear","qualname":"<BitVec<Block>>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Removes all elements from the bit-vector.","sig":null,"attributes":[{"value":"/ Removes all elements from the bit-vector.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":99986,"byte_end":100031,"line_start":612,"line_end":612,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":100036,"byte_end":100039,"line_start":613,"line_end":613,"column_start":5,"column_end":8}},{"value":"/ Does not change the capacity.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":100044,"byte_end":100077,"line_start":614,"line_end":614,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":100082,"byte_end":100085,"line_start":615,"line_end":615,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":100090,"byte_end":100104,"line_start":616,"line_end":616,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":100109,"byte_end":100112,"line_start":617,"line_end":617,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":100117,"byte_end":100124,"line_start":618,"line_end":618,"column_start":5,"column_end":12}},{"value":"/ use bv::*;","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":100129,"byte_end":100143,"line_start":619,"line_end":619,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":100148,"byte_end":100151,"line_start":620,"line_end":620,"column_start":5,"column_end":8}},{"value":"/ let mut bv: BitVec<u32> = bit_vec![ true ];","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":100156,"byte_end":100203,"line_start":621,"line_end":621,"column_start":5,"column_end":52}},{"value":"/ assert_eq!( bv.len(), 1 );","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":100208,"byte_end":100238,"line_start":622,"line_end":622,"column_start":5,"column_end":35}},{"value":"/ assert_eq!( bv.capacity(), 32 );","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":100243,"byte_end":100279,"line_start":623,"line_end":623,"column_start":5,"column_end":41}},{"value":"/ bv.clear();","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":100284,"byte_end":100299,"line_start":624,"line_end":624,"column_start":5,"column_end":20}},{"value":"/ assert_eq!( bv.len(), 0 );","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":100304,"byte_end":100334,"line_start":625,"line_end":625,"column_start":5,"column_end":35}},{"value":"/ assert_eq!( bv.capacity(), 32 );","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":100339,"byte_end":100375,"line_start":626,"line_end":626,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":100380,"byte_end":100387,"line_start":627,"line_end":627,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":871},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":100732,"byte_end":100740,"line_start":644,"line_end":644,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<BitVec<Block>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Does the bit-vector have no elements?","sig":null,"attributes":[{"value":"/ Does the bit-vector have no elements?","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":100451,"byte_end":100492,"line_start":632,"line_end":632,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":100497,"byte_end":100500,"line_start":633,"line_end":633,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":100505,"byte_end":100519,"line_start":634,"line_end":634,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":100524,"byte_end":100527,"line_start":635,"line_end":635,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":100532,"byte_end":100539,"line_start":636,"line_end":636,"column_start":5,"column_end":12}},{"value":"/ use bv::*;","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":100544,"byte_end":100558,"line_start":637,"line_end":637,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":100563,"byte_end":100566,"line_start":638,"line_end":638,"column_start":5,"column_end":8}},{"value":"/ let mut bv: BitVec<u32> = bit_vec![ true ];","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":100571,"byte_end":100618,"line_start":639,"line_end":639,"column_start":5,"column_end":52}},{"value":"/ assert!( !bv.is_empty() );","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":100623,"byte_end":100653,"line_start":640,"line_end":640,"column_start":5,"column_end":35}},{"value":"/ bv.clear();","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":100658,"byte_end":100673,"line_start":641,"line_end":641,"column_start":5,"column_end":20}},{"value":"/ assert!(  bv.is_empty() );","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":100678,"byte_end":100708,"line_start":642,"line_end":642,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":100713,"byte_end":100720,"line_start":643,"line_end":643,"column_start":5,"column_end":12}}]},{"kind":"Mod","id":{"krate":0,"index":934},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"adapter","qualname":"::adapter","value":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\mod.rs","parent":null,"children":[{"krate":0,"index":935},{"krate":0,"index":1031},{"krate":0,"index":1034},{"krate":0,"index":1121},{"krate":0,"index":1122},{"krate":0,"index":1125},{"krate":0,"index":1128},{"krate":0,"index":1131},{"krate":0,"index":1134},{"krate":0,"index":1137},{"krate":0,"index":1165},{"krate":0,"index":1168},{"krate":0,"index":1194},{"krate":0,"index":1197},{"krate":0,"index":1240}],"decl_id":null,"docs":" Lazy bit vector adapters.","sig":null,"attributes":[{"value":"/ Lazy bit vector adapters.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\mod.rs","byte_start":121335,"byte_end":121364,"line_start":1,"line_end":1,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\mod.rs","byte_start":121365,"byte_end":121368,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This module defines adapters for dealing with bit vectors and other","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\mod.rs","byte_start":121369,"byte_end":121440,"line_start":3,"line_end":3,"column_start":1,"column_end":72}},{"value":"/ types that implement [`Bits`]. It also defines the adaptors that","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\mod.rs","byte_start":121441,"byte_end":121509,"line_start":4,"line_end":4,"column_start":1,"column_end":69}},{"value":"/ are returned by methods of the extension trait [`BitsExt`].","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\mod.rs","byte_start":121510,"byte_end":121573,"line_start":5,"line_end":5,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\mod.rs","byte_start":121574,"byte_end":121577,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ [`Bits`]: ../trait.Bits.html","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\mod.rs","byte_start":121578,"byte_end":121610,"line_start":7,"line_end":7,"column_start":1,"column_end":33}},{"value":"/ [`BitsExt`]: ../trait.BitsExt.html","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\mod.rs","byte_start":121611,"byte_end":121649,"line_start":8,"line_end":8,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":3111},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bit_slice_adapter.rs","byte_start":125979,"byte_end":125994,"line_start":12,"line_end":12,"column_start":12,"column_end":27},"name":"BitSliceAdapter","qualname":"::adapter::bit_slice_adapter::BitSliceAdapter","value":"BitSliceAdapter {  }","parent":null,"children":[{"krate":0,"index":3113},{"krate":0,"index":3114},{"krate":0,"index":3115}],"decl_id":null,"docs":" An adapter that turns any implementation of `Bits` into a slice.","sig":null,"attributes":[{"value":"/ An adapter that turns any implementation of `Bits` into a slice.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bit_slice_adapter.rs","byte_start":125766,"byte_end":125834,"line_start":6,"line_end":6,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bit_slice_adapter.rs","byte_start":125835,"byte_end":125838,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ This is likely less efficient than [`BitSlice`].","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bit_slice_adapter.rs","byte_start":125839,"byte_end":125891,"line_start":8,"line_end":8,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bit_slice_adapter.rs","byte_start":125892,"byte_end":125895,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ [`BitSlice`]: ../struct.BitSlice.html","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bit_slice_adapter.rs","byte_start":125896,"byte_end":125937,"line_start":10,"line_end":10,"column_start":1,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":955},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bit_slice_adapter.rs","byte_start":126328,"byte_end":126331,"line_start":26,"line_end":26,"column_start":12,"column_end":15},"name":"new","qualname":"<BitSliceAdapter<T>>::new","value":"pub fn new(T, u64, u64) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new slice adaptor from the given bit-vector-like.","sig":null,"attributes":[{"value":"/ Creates a new slice adaptor from the given bit-vector-like.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bit_slice_adapter.rs","byte_start":126088,"byte_end":126151,"line_start":19,"line_end":19,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bit_slice_adapter.rs","byte_start":126156,"byte_end":126159,"line_start":20,"line_end":20,"column_start":5,"column_end":8}},{"value":"/ Takes the index of the start bit, and the length to slice.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bit_slice_adapter.rs","byte_start":126164,"byte_end":126226,"line_start":21,"line_end":21,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bit_slice_adapter.rs","byte_start":126231,"byte_end":126234,"line_start":22,"line_end":22,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bit_slice_adapter.rs","byte_start":126239,"byte_end":126251,"line_start":23,"line_end":23,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bit_slice_adapter.rs","byte_start":126256,"byte_end":126259,"line_start":24,"line_end":24,"column_start":5,"column_end":8}},{"value":"/ Out of bounds if `start + len > bits.bit_len()`.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bit_slice_adapter.rs","byte_start":126264,"byte_end":126316,"line_start":25,"line_end":25,"column_start":5,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":3133},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\logic.rs","byte_start":136867,"byte_end":136873,"line_start":14,"line_end":14,"column_start":12,"column_end":18},"name":"BitNot","qualname":"::adapter::logic::BitNot","value":"","parent":null,"children":[],"decl_id":null,"docs":" The result of [`BitsExt::bit_not`](../trait.BitsExt.html#method.bit_not).","sig":null,"attributes":[{"value":"/ The result of [`BitsExt::bit_not`](../trait.BitsExt.html#method.bit_not).","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\logic.rs","byte_start":136658,"byte_end":136735,"line_start":9,"line_end":9,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\logic.rs","byte_start":136736,"byte_end":136739,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ The resulting bit vector adapter *not*s the bits of the underlying","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\logic.rs","byte_start":136740,"byte_end":136810,"line_start":11,"line_end":11,"column_start":1,"column_end":71}},{"value":"/ bit-vector-like.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\logic.rs","byte_start":136811,"byte_end":136831,"line_start":12,"line_end":12,"column_start":1,"column_end":21}}]},{"kind":"Struct","id":{"krate":0,"index":3143},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\logic.rs","byte_start":137188,"byte_end":137194,"line_start":27,"line_end":27,"column_start":12,"column_end":18},"name":"BitAnd","qualname":"::adapter::logic::BitAnd","value":"","parent":null,"children":[],"decl_id":null,"docs":" The result of [`BitsExt::bit_and`](../trait.BitsExt.html#method.bit_and).","sig":null,"attributes":[{"value":"/ The result of [`BitsExt::bit_and`](../trait.BitsExt.html#method.bit_and).","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\logic.rs","byte_start":136974,"byte_end":137051,"line_start":22,"line_end":22,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\logic.rs","byte_start":137052,"byte_end":137055,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ The resulting bit vector adapter *and*s the bits of the two underlying","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\logic.rs","byte_start":137056,"byte_end":137130,"line_start":24,"line_end":24,"column_start":1,"column_end":75}},{"value":"/ bit-vector-likes.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\logic.rs","byte_start":137131,"byte_end":137152,"line_start":25,"line_end":25,"column_start":1,"column_end":22}}]},{"kind":"Struct","id":{"krate":0,"index":3156},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\logic.rs","byte_start":137592,"byte_end":137597,"line_start":40,"line_end":40,"column_start":12,"column_end":17},"name":"BitOr","qualname":"::adapter::logic::BitOr","value":"","parent":null,"children":[],"decl_id":null,"docs":" The result of [`BitsExt::bit_or`](../trait.BitsExt.html#method.bit_or).","sig":null,"attributes":[{"value":"/ The result of [`BitsExt::bit_or`](../trait.BitsExt.html#method.bit_or).","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\logic.rs","byte_start":137381,"byte_end":137456,"line_start":35,"line_end":35,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\logic.rs","byte_start":137457,"byte_end":137460,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ The resulting bit vector adapter *or*s the bits of the two underlying","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\logic.rs","byte_start":137461,"byte_end":137534,"line_start":37,"line_end":37,"column_start":1,"column_end":74}},{"value":"/ bit-vector-likes.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\logic.rs","byte_start":137535,"byte_end":137556,"line_start":38,"line_end":38,"column_start":1,"column_end":22}}]},{"kind":"Struct","id":{"krate":0,"index":3169},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\logic.rs","byte_start":137996,"byte_end":138002,"line_start":53,"line_end":53,"column_start":12,"column_end":18},"name":"BitXor","qualname":"::adapter::logic::BitXor","value":"","parent":null,"children":[],"decl_id":null,"docs":" The result of [`BitsExt::bit_xor`](../trait.BitsExt.html#method.bit_xor).","sig":null,"attributes":[{"value":"/ The result of [`BitsExt::bit_xor`](../trait.BitsExt.html#method.bit_xor).","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\logic.rs","byte_start":137782,"byte_end":137859,"line_start":48,"line_end":48,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\logic.rs","byte_start":137860,"byte_end":137863,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ The resulting bit vector adapter *xor*s the bits of the two underlying","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\logic.rs","byte_start":137864,"byte_end":137938,"line_start":50,"line_end":50,"column_start":1,"column_end":75}},{"value":"/ bit-vector-likes.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\logic.rs","byte_start":137939,"byte_end":137960,"line_start":51,"line_end":51,"column_start":1,"column_end":22}}]},{"kind":"Struct","id":{"krate":0,"index":3182},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\logic.rs","byte_start":138302,"byte_end":138308,"line_start":63,"line_end":63,"column_start":12,"column_end":18},"name":"BitZip","qualname":"::adapter::logic::BitZip","value":"BitZip {  }","parent":null,"children":[{"krate":0,"index":3186},{"krate":0,"index":3187}],"decl_id":null,"docs":" The result of [`BitsExt::bit_zip`](../trait.BitsExt.html#method.bit_zip).\n","sig":null,"attributes":[{"value":"/ The result of [`BitsExt::bit_zip`](../trait.BitsExt.html#method.bit_zip).","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\logic.rs","byte_start":138189,"byte_end":138266,"line_start":61,"line_end":61,"column_start":1,"column_end":78}}]},{"kind":"Struct","id":{"krate":0,"index":3502},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bit_fill.rs","byte_start":144640,"byte_end":144647,"line_start":9,"line_end":9,"column_start":12,"column_end":19},"name":"BitFill","qualname":"::adapter::bit_fill::BitFill","value":"BitFill {  }","parent":null,"children":[{"krate":0,"index":3504},{"krate":0,"index":3505}],"decl_id":null,"docs":" Emulates a constant-valued bit-vector of a given size.\n","sig":null,"attributes":[{"value":"/ Emulates a constant-valued bit-vector of a given size.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bit_fill.rs","byte_start":144546,"byte_end":144604,"line_start":7,"line_end":7,"column_start":1,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1160},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bit_fill.rs","byte_start":145712,"byte_end":145718,"line_start":48,"line_end":48,"column_start":12,"column_end":18},"name":"zeroes","qualname":"<BitFill<Block>>::zeroes","value":"pub fn zeroes(u64) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a compact bit-vector-like of `len` 0s.\n","sig":null,"attributes":[{"value":"/ Constructs a compact bit-vector-like of `len` 0s.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bit_fill.rs","byte_start":145647,"byte_end":145700,"line_start":47,"line_end":47,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1161},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bit_fill.rs","byte_start":145894,"byte_end":145898,"line_start":56,"line_end":56,"column_start":12,"column_end":16},"name":"ones","qualname":"<BitFill<Block>>::ones","value":"pub fn ones(u64) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a compact bit-vector-like of `len` 1s.\n","sig":null,"attributes":[{"value":"/ Constructs a compact bit-vector-like of `len` 1s.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bit_fill.rs","byte_start":145829,"byte_end":145882,"line_start":55,"line_end":55,"column_start":5,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":3575},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bit_concat.rs","byte_start":146683,"byte_end":146692,"line_start":11,"line_end":11,"column_start":12,"column_end":21},"name":"BitConcat","qualname":"::adapter::bit_concat::BitConcat","value":"","parent":null,"children":[],"decl_id":null,"docs":" The result of\n [`BitsExt::bit_concat`](../trait.BitsExt.html#method.bit_concat).","sig":null,"attributes":[{"value":"/ The result of","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bit_concat.rs","byte_start":146453,"byte_end":146470,"line_start":5,"line_end":5,"column_start":1,"column_end":18}},{"value":"/ [`BitsExt::bit_concat`](../trait.BitsExt.html#method.bit_concat).","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bit_concat.rs","byte_start":146471,"byte_end":146540,"line_start":6,"line_end":6,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bit_concat.rs","byte_start":146541,"byte_end":146544,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ The resulting bit vector adapter concatenates the bits of the two underlying","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bit_concat.rs","byte_start":146545,"byte_end":146625,"line_start":8,"line_end":8,"column_start":1,"column_end":81}},{"value":"/ bit-vector-likes.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bit_concat.rs","byte_start":146626,"byte_end":146647,"line_start":9,"line_end":9,"column_start":1,"column_end":22}}]},{"kind":"Struct","id":{"krate":0,"index":3665},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bool_adapter.rs","byte_start":149506,"byte_end":149517,"line_start":26,"line_end":26,"column_start":12,"column_end":23},"name":"BoolAdapter","qualname":"::adapter::bool_adapter::BoolAdapter","value":"BoolAdapter {  }","parent":null,"children":[{"krate":0,"index":3668},{"krate":0,"index":3669}],"decl_id":null,"docs":" Adapts a sequence of `bool`s (*e.g.,* `&[bool]`) to emulate a bit\n vector.","sig":null,"attributes":[{"value":"/ Adapts a sequence of `bool`s (*e.g.,* `&[bool]`) to emulate a bit","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bool_adapter.rs","byte_start":148691,"byte_end":148760,"line_start":8,"line_end":8,"column_start":1,"column_end":70}},{"value":"/ vector.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bool_adapter.rs","byte_start":148761,"byte_end":148772,"line_start":9,"line_end":9,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bool_adapter.rs","byte_start":148773,"byte_end":148776,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ In particular, this adapter implements [`Bits`], [`BitsMut`], and","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bool_adapter.rs","byte_start":148777,"byte_end":148846,"line_start":11,"line_end":11,"column_start":1,"column_end":70}},{"value":"/ [`BitsPush`] as appropriate. It implement `PartialEq<T>` for all","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bool_adapter.rs","byte_start":148847,"byte_end":148915,"line_start":12,"line_end":12,"column_start":1,"column_end":69}},{"value":"/ `T: Bits<Block=Block>`. It does not, however, implement slicing, so","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bool_adapter.rs","byte_start":148916,"byte_end":148987,"line_start":13,"line_end":13,"column_start":1,"column_end":72}},{"value":"/ slice before you adapt.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bool_adapter.rs","byte_start":148988,"byte_end":149015,"line_start":14,"line_end":14,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bool_adapter.rs","byte_start":149016,"byte_end":149019,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ Note that a bare `Vec<bool>` or `&[bool]` already implements [`Bits`],","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bool_adapter.rs","byte_start":149020,"byte_end":149094,"line_start":16,"line_end":16,"column_start":1,"column_end":75}},{"value":"/ etc., with a `Block` type of `u8`. This means that it is only","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bool_adapter.rs","byte_start":149095,"byte_end":149160,"line_start":17,"line_end":17,"column_start":1,"column_end":66}},{"value":"/ compatible with other `u8`-based bit vectors. `BoolAdapter` is instead","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bool_adapter.rs","byte_start":149161,"byte_end":149235,"line_start":18,"line_end":18,"column_start":1,"column_end":75}},{"value":"/ parametrized by the block type, so it works with bit vectors, slices,","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bool_adapter.rs","byte_start":149236,"byte_end":149309,"line_start":19,"line_end":19,"column_start":1,"column_end":74}},{"value":"/ and adapters of any uniform block type.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bool_adapter.rs","byte_start":149310,"byte_end":149353,"line_start":20,"line_end":20,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bool_adapter.rs","byte_start":149354,"byte_end":149357,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ [`Bits`]: ../trait.Bits.html","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bool_adapter.rs","byte_start":149358,"byte_end":149390,"line_start":22,"line_end":22,"column_start":1,"column_end":33}},{"value":"/ [`BitsMut`]: ../trait.BitsMut.html","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bool_adapter.rs","byte_start":149391,"byte_end":149429,"line_start":23,"line_end":23,"column_start":1,"column_end":39}},{"value":"/ [`BitsPush`]: ../trait.BitsPush.html","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bool_adapter.rs","byte_start":149430,"byte_end":149470,"line_start":24,"line_end":24,"column_start":1,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":1223},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bool_adapter.rs","byte_start":150108,"byte_end":150111,"line_start":47,"line_end":47,"column_start":12,"column_end":15},"name":"new","qualname":"<BoolAdapter<Block, T>>::new","value":"pub fn new(T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `BoolAdapter` from an underlying sequence of `bool`s.","sig":null,"attributes":[{"value":"/ Creates a new `BoolAdapter` from an underlying sequence of `bool`s.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bool_adapter.rs","byte_start":149636,"byte_end":149707,"line_start":32,"line_end":32,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bool_adapter.rs","byte_start":149712,"byte_end":149715,"line_start":33,"line_end":33,"column_start":5,"column_end":8}},{"value":"/ Note that the `BoolAdapter` derefs to the underlying `bool` sequence.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bool_adapter.rs","byte_start":149720,"byte_end":149793,"line_start":34,"line_end":34,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bool_adapter.rs","byte_start":149798,"byte_end":149801,"line_start":35,"line_end":35,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bool_adapter.rs","byte_start":149806,"byte_end":149820,"line_start":36,"line_end":36,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bool_adapter.rs","byte_start":149825,"byte_end":149828,"line_start":37,"line_end":37,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bool_adapter.rs","byte_start":149833,"byte_end":149840,"line_start":38,"line_end":38,"column_start":5,"column_end":12}},{"value":"/ use bv::BitSliceable;","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bool_adapter.rs","byte_start":149845,"byte_end":149870,"line_start":39,"line_end":39,"column_start":5,"column_end":30}},{"value":"/ use bv::adapter::BoolAdapter;","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bool_adapter.rs","byte_start":149875,"byte_end":149908,"line_start":40,"line_end":40,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bool_adapter.rs","byte_start":149913,"byte_end":149916,"line_start":41,"line_end":41,"column_start":5,"column_end":8}},{"value":"/ let array = [0b101usize];","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bool_adapter.rs","byte_start":149921,"byte_end":149950,"line_start":42,"line_end":42,"column_start":5,"column_end":34}},{"value":"/ let bv1 = BoolAdapter::new(vec![true, false, true]);","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bool_adapter.rs","byte_start":149955,"byte_end":150011,"line_start":43,"line_end":43,"column_start":5,"column_end":61}},{"value":"/ let bv2 = array.bit_slice(0..3);","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bool_adapter.rs","byte_start":150016,"byte_end":150052,"line_start":44,"line_end":44,"column_start":5,"column_end":41}},{"value":"/ assert_eq!( bv1, bv2 );","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bool_adapter.rs","byte_start":150057,"byte_end":150084,"line_start":45,"line_end":45,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bool_adapter.rs","byte_start":150089,"byte_end":150096,"line_start":46,"line_end":46,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1224},"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bool_adapter.rs","byte_start":150313,"byte_end":150323,"line_start":55,"line_end":55,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<BoolAdapter<Block, T>>::into_inner","value":"pub fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Gets the underlying `bool` sequence object back out of a `BoolAdapter`.\n","sig":null,"attributes":[{"value":"/ Gets the underlying `bool` sequence object back out of a `BoolAdapter`.","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bool_adapter.rs","byte_start":150226,"byte_end":150301,"line_start":54,"line_end":54,"column_start":5,"column_end":80}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":16543,"byte_end":16550,"line_start":344,"line_end":344,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":67}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits.rs","byte_start":34328,"byte_end":34331,"line_start":195,"line_end":195,"column_start":33,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":126}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits.rs","byte_start":34968,"byte_end":34971,"line_start":223,"line_end":223,"column_start":33,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":129},{"krate":0,"index":130},{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":135}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits.rs","byte_start":36069,"byte_end":36072,"line_start":272,"line_end":272,"column_start":33,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":145},{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":150}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits.rs","byte_start":36872,"byte_end":36875,"line_start":310,"line_end":310,"column_start":15,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":43625,"byte_end":43626,"line_start":199,"line_end":199,"column_start":27,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_mut.rs","byte_start":47459,"byte_end":47462,"line_start":101,"line_end":101,"column_start":36,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":225},{"krate":0,"index":226},{"krate":0,"index":227}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_mut.rs","byte_start":48246,"byte_end":48249,"line_start":127,"line_end":127,"column_start":36,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":234},{"krate":0,"index":235}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_mut.rs","byte_start":48744,"byte_end":48747,"line_start":145,"line_end":145,"column_start":18,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":239}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_mut_ext.rs","byte_start":52070,"byte_end":52071,"line_start":93,"line_end":93,"column_start":33,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_push.rs","byte_start":54133,"byte_end":54136,"line_start":37,"line_end":37,"column_start":19,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":287},{"krate":0,"index":288}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bit_sliceable.rs","byte_start":56151,"byte_end":56152,"line_start":53,"line_end":53,"column_start":43,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":60075,"byte_end":60084,"line_start":29,"line_end":29,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":430},{"krate":0,"index":432},{"krate":0,"index":434},{"krate":0,"index":436},{"krate":0,"index":438},{"krate":0,"index":440}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":61871,"byte_end":61883,"line_start":81,"line_end":81,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":443},{"krate":0,"index":445}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":66262,"byte_end":66270,"line_start":201,"line_end":201,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":456},{"krate":0,"index":457},{"krate":0,"index":458},{"krate":0,"index":459}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":68694,"byte_end":68705,"line_start":283,"line_end":283,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":463},{"krate":0,"index":464},{"krate":0,"index":465},{"krate":0,"index":466},{"krate":0,"index":467}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":70490,"byte_end":70498,"line_start":336,"line_end":336,"column_start":69,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":472}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":70656,"byte_end":70664,"line_start":342,"line_end":342,"column_start":50,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":476}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":70818,"byte_end":70829,"line_start":348,"line_end":348,"column_start":54,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":480}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":71641,"byte_end":71649,"line_start":374,"line_end":374,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":488},{"krate":0,"index":489},{"krate":0,"index":490},{"krate":0,"index":491},{"krate":0,"index":492},{"krate":0,"index":493}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":72583,"byte_end":72594,"line_start":404,"line_end":404,"column_start":37,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":497},{"krate":0,"index":498},{"krate":0,"index":499},{"krate":0,"index":500},{"krate":0,"index":501}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":73436,"byte_end":73447,"line_start":430,"line_end":430,"column_start":40,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":505},{"krate":0,"index":506},{"krate":0,"index":507}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":74461,"byte_end":74469,"line_start":457,"line_end":457,"column_start":57,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":511},{"krate":0,"index":512}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":74994,"byte_end":75005,"line_start":472,"line_end":472,"column_start":57,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":516},{"krate":0,"index":517}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":75578,"byte_end":75586,"line_start":488,"line_end":488,"column_start":66,"column_end":74},"value":"","parent":null,"children":[{"krate":0,"index":521},{"krate":0,"index":522}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":76165,"byte_end":76176,"line_start":505,"line_end":505,"column_start":66,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":526},{"krate":0,"index":527}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":76741,"byte_end":76749,"line_start":521,"line_end":521,"column_start":61,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":531},{"krate":0,"index":532}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":76988,"byte_end":76999,"line_start":530,"line_end":530,"column_start":61,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":536},{"krate":0,"index":537}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":77236,"byte_end":77244,"line_start":539,"line_end":539,"column_start":59,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":541},{"krate":0,"index":542}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":77442,"byte_end":77453,"line_start":547,"line_end":547,"column_start":59,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":546},{"krate":0,"index":547}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":77684,"byte_end":77692,"line_start":556,"line_end":556,"column_start":68,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":551},{"krate":0,"index":552}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":77936,"byte_end":77947,"line_start":565,"line_end":565,"column_start":68,"column_end":79},"value":"","parent":null,"children":[{"krate":0,"index":556},{"krate":0,"index":557}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":78155,"byte_end":78163,"line_start":573,"line_end":573,"column_start":56,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":561},{"krate":0,"index":562}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":78325,"byte_end":78336,"line_start":581,"line_end":581,"column_start":56,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":566},{"krate":0,"index":567}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":79148,"byte_end":79156,"line_start":611,"line_end":611,"column_start":44,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":583}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":79316,"byte_end":79324,"line_start":617,"line_end":617,"column_start":35,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":79382,"byte_end":79390,"line_start":619,"line_end":619,"column_start":43,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":590}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":79556,"byte_end":79564,"line_start":625,"line_end":625,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":594}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":79795,"byte_end":79806,"line_start":633,"line_end":633,"column_start":44,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":598}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":79966,"byte_end":79977,"line_start":639,"line_end":639,"column_start":35,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":80035,"byte_end":80046,"line_start":641,"line_end":641,"column_start":43,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":605}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":80215,"byte_end":80226,"line_start":647,"line_end":647,"column_start":36,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":609}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":80410,"byte_end":80418,"line_start":653,"line_end":653,"column_start":56,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":613}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":80675,"byte_end":80686,"line_start":662,"line_end":662,"column_start":56,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":618}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":80845,"byte_end":80853,"line_start":668,"line_end":668,"column_start":43,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":623}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":81217,"byte_end":81228,"line_start":681,"line_end":681,"column_start":43,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":627}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\inner.rs","byte_start":101093,"byte_end":101098,"line_start":12,"line_end":12,"column_start":83,"column_end":88},"value":"","parent":null,"children":[{"krate":0,"index":662}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Inherent","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\inner.rs","byte_start":101586,"byte_end":101591,"line_start":28,"line_end":28,"column_start":24,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":666},{"krate":0,"index":667},{"krate":0,"index":668},{"krate":0,"index":669},{"krate":0,"index":670},{"krate":0,"index":671},{"krate":0,"index":672},{"krate":0,"index":673},{"krate":0,"index":674},{"krate":0,"index":675}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\inner.rs","byte_start":103795,"byte_end":103800,"line_start":106,"line_end":106,"column_start":47,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":678}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\impls.rs","byte_start":104180,"byte_end":104186,"line_start":14,"line_end":14,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":733},{"krate":0,"index":734},{"krate":0,"index":735},{"krate":0,"index":736},{"krate":0,"index":737}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\impls.rs","byte_start":105081,"byte_end":105087,"line_start":42,"line_end":42,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":740},{"krate":0,"index":741}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\impls.rs","byte_start":106094,"byte_end":106100,"line_start":65,"line_end":65,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":744},{"krate":0,"index":745},{"krate":0,"index":746},{"krate":0,"index":747}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\impls.rs","byte_start":110548,"byte_end":110554,"line_start":209,"line_end":209,"column_start":40,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":810}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\impls.rs","byte_start":110714,"byte_end":110720,"line_start":215,"line_end":215,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":813}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\impls.rs","byte_start":110958,"byte_end":110964,"line_start":223,"line_end":223,"column_start":31,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\impls.rs","byte_start":111007,"byte_end":111013,"line_start":225,"line_end":225,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":818}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\impls.rs","byte_start":111227,"byte_end":111233,"line_start":233,"line_end":233,"column_start":40,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":821}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\impls.rs","byte_start":111374,"byte_end":111380,"line_start":239,"line_end":239,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":825}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\impls.rs","byte_start":111535,"byte_end":111541,"line_start":245,"line_end":245,"column_start":47,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":828}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\impls.rs","byte_start":111763,"byte_end":111769,"line_start":255,"line_end":255,"column_start":45,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":831}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":84719,"byte_end":84725,"line_start":56,"line_end":56,"column_start":83,"column_end":89},"value":"","parent":null,"children":[{"krate":0,"index":835}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":85346,"byte_end":85352,"line_start":78,"line_end":78,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":839}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Inherent","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":85441,"byte_end":85447,"line_start":84,"line_end":84,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":842},{"krate":0,"index":843},{"krate":0,"index":844},{"krate":0,"index":845},{"krate":0,"index":846},{"krate":0,"index":847},{"krate":0,"index":848},{"krate":0,"index":849},{"krate":0,"index":850},{"krate":0,"index":852},{"krate":0,"index":853},{"krate":0,"index":854},{"krate":0,"index":855},{"krate":0,"index":856},{"krate":0,"index":857},{"krate":0,"index":858},{"krate":0,"index":859},{"krate":0,"index":860},{"krate":0,"index":861},{"krate":0,"index":862},{"krate":0,"index":863},{"krate":0,"index":864},{"krate":0,"index":865},{"krate":0,"index":866},{"krate":0,"index":867},{"krate":0,"index":868},{"krate":0,"index":869},{"krate":0,"index":870},{"krate":0,"index":871}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Inherent","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\iter.rs","byte_start":114491,"byte_end":114500,"line_start":14,"line_end":14,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":902},{"krate":0,"index":903}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\iter.rs","byte_start":114840,"byte_end":114849,"line_start":26,"line_end":26,"column_start":28,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":906},{"krate":0,"index":907},{"krate":0,"index":908}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\iter.rs","byte_start":115284,"byte_end":115293,"line_start":45,"line_end":45,"column_start":37,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":911}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\iter.rs","byte_start":116014,"byte_end":116023,"line_start":70,"line_end":70,"column_start":40,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":918}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\iter.rs","byte_start":116219,"byte_end":116228,"line_start":79,"line_end":79,"column_start":22,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\iter.rs","byte_start":116276,"byte_end":116285,"line_start":81,"line_end":81,"column_start":41,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":924}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\iter.rs","byte_start":116490,"byte_end":116499,"line_start":90,"line_end":90,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":927}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Inherent","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bit_slice_adapter.rs","byte_start":126063,"byte_end":126078,"line_start":18,"line_end":18,"column_start":15,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":955},{"krate":0,"index":956},{"krate":0,"index":957}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bit_slice_adapter.rs","byte_start":127655,"byte_end":127670,"line_start":69,"line_end":69,"column_start":29,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":961}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bit_slice_adapter.rs","byte_start":130570,"byte_end":130585,"line_start":144,"line_end":144,"column_start":24,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":965},{"krate":0,"index":966},{"krate":0,"index":967},{"krate":0,"index":968},{"krate":0,"index":969}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bit_slice_adapter.rs","byte_start":131494,"byte_end":131509,"line_start":172,"line_end":172,"column_start":30,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":972},{"krate":0,"index":973},{"krate":0,"index":974}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bit_slice_adapter.rs","byte_start":133108,"byte_end":133123,"line_start":215,"line_end":215,"column_start":44,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":979},{"krate":0,"index":980}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bit_slice_adapter.rs","byte_start":133428,"byte_end":133443,"line_start":225,"line_end":225,"column_start":46,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":983},{"krate":0,"index":984}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bit_slice_adapter.rs","byte_start":133625,"byte_end":133640,"line_start":233,"line_end":233,"column_start":48,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":987},{"krate":0,"index":988}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bit_slice_adapter.rs","byte_start":133972,"byte_end":133987,"line_start":244,"line_end":244,"column_start":43,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":991},{"krate":0,"index":992}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bit_slice_adapter.rs","byte_start":134174,"byte_end":134189,"line_start":253,"line_end":253,"column_start":53,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":995},{"krate":0,"index":996}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bit_slice_adapter.rs","byte_start":134540,"byte_end":134555,"line_start":264,"line_end":264,"column_start":55,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":999},{"krate":0,"index":1000}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Inherent","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\logic.rs","byte_start":136890,"byte_end":136896,"line_start":16,"line_end":16,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1056}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Inherent","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\logic.rs","byte_start":137260,"byte_end":137266,"line_start":29,"line_end":29,"column_start":42,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1060}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Inherent","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\logic.rs","byte_start":137663,"byte_end":137668,"line_start":42,"line_end":42,"column_start":42,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1064}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Inherent","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\logic.rs","byte_start":138068,"byte_end":138074,"line_start":55,"line_end":55,"column_start":42,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1068}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Inherent","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\logic.rs","byte_start":138404,"byte_end":138410,"line_start":68,"line_end":68,"column_start":45,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1073}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Inherent","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\logic.rs","byte_start":138967,"byte_end":138975,"line_start":88,"line_end":88,"column_start":42,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1077},{"krate":0,"index":1078},{"krate":0,"index":1079},{"krate":0,"index":1080},{"krate":0,"index":1081}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\logic.rs","byte_start":139519,"byte_end":139525,"line_start":111,"line_end":111,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1084},{"krate":0,"index":1085},{"krate":0,"index":1086},{"krate":0,"index":1087},{"krate":0,"index":1088}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\logic.rs","byte_start":140024,"byte_end":140030,"line_start":135,"line_end":135,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1092},{"krate":0,"index":1093}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\logic.rs","byte_start":140316,"byte_end":140322,"line_start":149,"line_end":149,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1097}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\logic.rs","byte_start":142758,"byte_end":142764,"line_start":225,"line_end":225,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1103},{"krate":0,"index":1104},{"krate":0,"index":1105},{"krate":0,"index":1106}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\logic.rs","byte_start":143505,"byte_end":143511,"line_start":251,"line_end":251,"column_start":45,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1113},{"krate":0,"index":1114}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\logic.rs","byte_start":144206,"byte_end":144212,"line_start":275,"line_end":275,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1120}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bit_fill.rs","byte_start":144724,"byte_end":144731,"line_start":14,"line_end":14,"column_start":33,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1152},{"krate":0,"index":1153},{"krate":0,"index":1154},{"krate":0,"index":1155},{"krate":0,"index":1156},{"krate":0,"index":1157}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Inherent","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bit_fill.rs","byte_start":145626,"byte_end":145633,"line_start":46,"line_end":46,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1160},{"krate":0,"index":1161}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bit_fill.rs","byte_start":146039,"byte_end":146046,"line_start":64,"line_end":64,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1164}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Inherent","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bit_concat.rs","byte_start":146718,"byte_end":146727,"line_start":13,"line_end":13,"column_start":12,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1181}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bit_concat.rs","byte_start":146850,"byte_end":146859,"line_start":19,"line_end":19,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1185},{"krate":0,"index":1186},{"krate":0,"index":1187},{"krate":0,"index":1188}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bit_concat.rs","byte_start":148062,"byte_end":148071,"line_start":59,"line_end":59,"column_start":32,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1193}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Inherent","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bool_adapter.rs","byte_start":149608,"byte_end":149619,"line_start":31,"line_end":31,"column_start":27,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1223},{"krate":0,"index":1224}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bool_adapter.rs","byte_start":150394,"byte_end":150405,"line_start":60,"line_end":60,"column_start":31,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1228},{"krate":0,"index":1229}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bool_adapter.rs","byte_start":150529,"byte_end":150540,"line_start":68,"line_end":68,"column_start":34,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1233}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bool_adapter.rs","byte_start":152769,"byte_end":152780,"line_start":142,"line_end":142,"column_start":36,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1239}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\lib.rs","byte_start":3481,"byte_end":3488,"line_start":132,"line_end":132,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":934}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":6084,"byte_end":6088,"line_start":7,"line_end":7,"column_start":22,"column_end":26},"kind":"SuperTrait","from":{"krate":2,"index":2863},"to":{"krate":0,"index":36}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":6112,"byte_end":6121,"line_start":8,"line_end":8,"column_start":22,"column_end":31},"kind":"SuperTrait","from":{"krate":2,"index":2504},"to":{"krate":0,"index":36}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":6145,"byte_end":6148,"line_start":9,"line_end":9,"column_start":22,"column_end":25},"kind":"SuperTrait","from":{"krate":2,"index":2540},"to":{"krate":0,"index":36}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":6177,"byte_end":6183,"line_start":10,"line_end":10,"column_start":27,"column_end":33},"kind":"SuperTrait","from":{"krate":2,"index":2976},"to":{"krate":0,"index":36}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":6227,"byte_end":6232,"line_start":11,"line_end":11,"column_start":27,"column_end":32},"kind":"SuperTrait","from":{"krate":2,"index":2981},"to":{"krate":0,"index":36}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":6276,"byte_end":6282,"line_start":12,"line_end":12,"column_start":27,"column_end":33},"kind":"SuperTrait","from":{"krate":2,"index":2986},"to":{"krate":0,"index":36}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":6326,"byte_end":6329,"line_start":13,"line_end":13,"column_start":27,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":2972},"to":{"krate":0,"index":36}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":6373,"byte_end":6376,"line_start":14,"line_end":14,"column_start":27,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":2991},"to":{"krate":0,"index":36}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":6427,"byte_end":6430,"line_start":15,"line_end":15,"column_start":27,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":2997},"to":{"krate":0,"index":36}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":6481,"byte_end":6484,"line_start":16,"line_end":16,"column_start":27,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":2925},"to":{"krate":0,"index":36}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\storage.rs","byte_start":16543,"byte_end":16550,"line_start":344,"line_end":344,"column_start":6,"column_end":13},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":1309},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits.rs","byte_start":34328,"byte_end":34331,"line_start":195,"line_end":195,"column_start":33,"column_end":36},"kind":{"Impl":{"id":1}},"from":{"krate":5,"index":196},"to":{"krate":0,"index":87}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits.rs","byte_start":34968,"byte_end":34971,"line_start":223,"line_end":223,"column_start":33,"column_end":36},"kind":{"Impl":{"id":2}},"from":{"krate":5,"index":196},"to":{"krate":0,"index":87}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits.rs","byte_start":36069,"byte_end":36072,"line_start":272,"line_end":272,"column_start":33,"column_end":36},"kind":{"Impl":{"id":3}},"from":{"krate":5,"index":6773},"to":{"krate":0,"index":87}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits.rs","byte_start":36872,"byte_end":36875,"line_start":310,"line_end":310,"column_start":15,"column_end":18},"kind":{"Impl":{"id":4}},"from":{"krate":5,"index":6773},"to":{"krate":0,"index":87}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":38126,"byte_end":38130,"line_start":34,"line_end":34,"column_start":20,"column_end":24},"kind":"SuperTrait","from":{"krate":0,"index":87},"to":{"krate":0,"index":170}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_ext.rs","byte_start":43625,"byte_end":43626,"line_start":199,"line_end":199,"column_start":27,"column_end":28},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":198},"to":{"krate":0,"index":170}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_mut.rs","byte_start":44016,"byte_end":44020,"line_start":10,"line_end":10,"column_start":20,"column_end":24},"kind":"SuperTrait","from":{"krate":0,"index":87},"to":{"krate":0,"index":213}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_mut.rs","byte_start":47459,"byte_end":47462,"line_start":101,"line_end":101,"column_start":36,"column_end":39},"kind":{"Impl":{"id":6}},"from":{"krate":5,"index":196},"to":{"krate":0,"index":213}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_mut.rs","byte_start":48246,"byte_end":48249,"line_start":127,"line_end":127,"column_start":36,"column_end":39},"kind":{"Impl":{"id":7}},"from":{"krate":5,"index":6773},"to":{"krate":0,"index":213}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_mut.rs","byte_start":48744,"byte_end":48747,"line_start":145,"line_end":145,"column_start":18,"column_end":21},"kind":{"Impl":{"id":8}},"from":{"krate":5,"index":6773},"to":{"krate":0,"index":213}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_mut_ext.rs","byte_start":49013,"byte_end":49020,"line_start":5,"line_end":5,"column_start":23,"column_end":30},"kind":"SuperTrait","from":{"krate":0,"index":213},"to":{"krate":0,"index":254}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_mut_ext.rs","byte_start":52070,"byte_end":52071,"line_start":93,"line_end":93,"column_start":33,"column_end":34},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":270},"to":{"krate":0,"index":254}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_push.rs","byte_start":53064,"byte_end":53071,"line_start":5,"line_end":5,"column_start":21,"column_end":28},"kind":"SuperTrait","from":{"krate":0,"index":213},"to":{"krate":0,"index":281}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bits_push.rs","byte_start":54133,"byte_end":54136,"line_start":37,"line_end":37,"column_start":19,"column_end":22},"kind":{"Impl":{"id":10}},"from":{"krate":5,"index":6773},"to":{"krate":0,"index":281}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bit_sliceable.rs","byte_start":54722,"byte_end":54726,"line_start":12,"line_end":12,"column_start":32,"column_end":36},"kind":"SuperTrait","from":{"krate":0,"index":87},"to":{"krate":0,"index":301}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bit_sliceable.rs","byte_start":55670,"byte_end":55682,"line_start":41,"line_end":41,"column_start":35,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":301},"to":{"krate":0,"index":305}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\traits\\bit_sliceable.rs","byte_start":56151,"byte_end":56152,"line_start":53,"line_end":53,"column_start":43,"column_end":44},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":310},"to":{"krate":0,"index":305}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":60075,"byte_end":60084,"line_start":29,"line_end":29,"column_start":6,"column_end":15},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":1331},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":61871,"byte_end":61883,"line_start":81,"line_end":81,"column_start":6,"column_end":18},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":1340},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":66262,"byte_end":66270,"line_start":201,"line_end":201,"column_start":28,"column_end":36},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":1353},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":68694,"byte_end":68705,"line_start":283,"line_end":283,"column_start":28,"column_end":39},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":447},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":70490,"byte_end":70498,"line_start":336,"line_end":336,"column_start":69,"column_end":77},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":1353},"to":{"krate":2,"index":2759}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":70656,"byte_end":70664,"line_start":342,"line_end":342,"column_start":50,"column_end":58},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":1353},"to":{"krate":2,"index":2759}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":70818,"byte_end":70829,"line_start":348,"line_end":348,"column_start":54,"column_end":65},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":447},"to":{"krate":2,"index":2759}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":71641,"byte_end":71649,"line_start":374,"line_end":374,"column_start":37,"column_end":45},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":1353},"to":{"krate":0,"index":87}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":72583,"byte_end":72594,"line_start":404,"line_end":404,"column_start":37,"column_end":48},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":447},"to":{"krate":0,"index":87}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":73436,"byte_end":73447,"line_start":430,"line_end":430,"column_start":40,"column_end":51},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":447},"to":{"krate":0,"index":213}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":74461,"byte_end":74469,"line_start":457,"line_end":457,"column_start":57,"column_end":65},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":1353},"to":{"krate":0,"index":301}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":74994,"byte_end":75005,"line_start":472,"line_end":472,"column_start":57,"column_end":68},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":447},"to":{"krate":0,"index":301}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":75578,"byte_end":75586,"line_start":488,"line_end":488,"column_start":66,"column_end":74},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":1353},"to":{"krate":0,"index":301}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":76165,"byte_end":76176,"line_start":505,"line_end":505,"column_start":66,"column_end":77},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":447},"to":{"krate":0,"index":301}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":76741,"byte_end":76749,"line_start":521,"line_end":521,"column_start":61,"column_end":69},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":1353},"to":{"krate":0,"index":301}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":76988,"byte_end":76999,"line_start":530,"line_end":530,"column_start":61,"column_end":72},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":447},"to":{"krate":0,"index":301}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":77236,"byte_end":77244,"line_start":539,"line_end":539,"column_start":59,"column_end":67},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":1353},"to":{"krate":0,"index":301}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":77442,"byte_end":77453,"line_start":547,"line_end":547,"column_start":59,"column_end":70},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":447},"to":{"krate":0,"index":301}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":77684,"byte_end":77692,"line_start":556,"line_end":556,"column_start":68,"column_end":76},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":1353},"to":{"krate":0,"index":301}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":77936,"byte_end":77947,"line_start":565,"line_end":565,"column_start":68,"column_end":79},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":447},"to":{"krate":0,"index":301}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":78155,"byte_end":78163,"line_start":573,"line_end":573,"column_start":56,"column_end":64},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":1353},"to":{"krate":0,"index":301}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":78325,"byte_end":78336,"line_start":581,"line_end":581,"column_start":56,"column_end":67},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":447},"to":{"krate":0,"index":301}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":79148,"byte_end":79156,"line_start":611,"line_end":611,"column_start":44,"column_end":52},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":1353},"to":{"krate":2,"index":2504}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":79316,"byte_end":79324,"line_start":617,"line_end":617,"column_start":35,"column_end":43},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":1353},"to":{"krate":2,"index":2509}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":79382,"byte_end":79390,"line_start":619,"line_end":619,"column_start":43,"column_end":51},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":1353},"to":{"krate":2,"index":2551}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":79556,"byte_end":79564,"line_start":625,"line_end":625,"column_start":36,"column_end":44},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":1353},"to":{"krate":2,"index":2540}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":79795,"byte_end":79806,"line_start":633,"line_end":633,"column_start":44,"column_end":55},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":447},"to":{"krate":2,"index":2504}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":79966,"byte_end":79977,"line_start":639,"line_end":639,"column_start":35,"column_end":46},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":447},"to":{"krate":2,"index":2509}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":80035,"byte_end":80046,"line_start":641,"line_end":641,"column_start":43,"column_end":54},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":447},"to":{"krate":2,"index":2551}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":80215,"byte_end":80226,"line_start":647,"line_end":647,"column_start":36,"column_end":47},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":447},"to":{"krate":2,"index":2540}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":80410,"byte_end":80418,"line_start":653,"line_end":653,"column_start":56,"column_end":64},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":1353},"to":{"krate":2,"index":9100}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":80675,"byte_end":80686,"line_start":662,"line_end":662,"column_start":56,"column_end":67},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":447},"to":{"krate":2,"index":9100}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":80845,"byte_end":80853,"line_start":668,"line_end":668,"column_start":43,"column_end":51},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":1353},"to":{"krate":2,"index":8894}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\slice.rs","byte_start":81217,"byte_end":81228,"line_start":681,"line_end":681,"column_start":43,"column_end":54},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":447},"to":{"krate":2,"index":8894}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\inner.rs","byte_start":101093,"byte_end":101098,"line_start":12,"line_end":12,"column_start":83,"column_end":88},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":1389},"to":{"krate":14,"index":1539}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\inner.rs","byte_start":101586,"byte_end":101591,"line_start":28,"line_end":28,"column_start":24,"column_end":29},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":1389},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\inner.rs","byte_start":103795,"byte_end":103800,"line_start":106,"line_end":106,"column_start":47,"column_end":52},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":1389},"to":{"krate":2,"index":2759}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\impls.rs","byte_start":104180,"byte_end":104186,"line_start":14,"line_end":14,"column_start":33,"column_end":39},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":1438},"to":{"krate":0,"index":87}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\impls.rs","byte_start":105081,"byte_end":105087,"line_start":42,"line_end":42,"column_start":36,"column_end":42},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":1438},"to":{"krate":0,"index":213}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\impls.rs","byte_start":106094,"byte_end":106100,"line_start":65,"line_end":65,"column_start":37,"column_end":43},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":1438},"to":{"krate":0,"index":281}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\impls.rs","byte_start":110548,"byte_end":110554,"line_start":209,"line_end":209,"column_start":40,"column_end":46},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":1438},"to":{"krate":2,"index":2504}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\impls.rs","byte_start":110714,"byte_end":110720,"line_start":215,"line_end":215,"column_start":39,"column_end":45},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":1438},"to":{"krate":2,"index":2551}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\impls.rs","byte_start":110958,"byte_end":110964,"line_start":223,"line_end":223,"column_start":31,"column_end":37},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":1438},"to":{"krate":2,"index":2509}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\impls.rs","byte_start":111007,"byte_end":111013,"line_start":225,"line_end":225,"column_start":32,"column_end":38},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":1438},"to":{"krate":2,"index":2540}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\impls.rs","byte_start":111227,"byte_end":111233,"line_start":233,"line_end":233,"column_start":40,"column_end":46},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":1438},"to":{"krate":2,"index":9100}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\impls.rs","byte_start":111374,"byte_end":111380,"line_start":239,"line_end":239,"column_start":39,"column_end":45},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":1438},"to":{"krate":2,"index":8894}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\impls.rs","byte_start":111535,"byte_end":111541,"line_start":245,"line_end":245,"column_start":47,"column_end":53},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":1438},"to":{"krate":2,"index":2759}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\impls.rs","byte_start":111763,"byte_end":111769,"line_start":255,"line_end":255,"column_start":45,"column_end":51},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":1438},"to":{"krate":2,"index":2759}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":84719,"byte_end":84725,"line_start":56,"line_end":56,"column_start":83,"column_end":89},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":1438},"to":{"krate":14,"index":1539}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":85346,"byte_end":85352,"line_start":78,"line_end":78,"column_start":36,"column_end":42},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":1438},"to":{"krate":2,"index":2831}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\bit_vec\\mod.rs","byte_start":85441,"byte_end":85447,"line_start":84,"line_end":84,"column_start":24,"column_end":30},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":1438},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\iter.rs","byte_start":114491,"byte_end":114500,"line_start":14,"line_end":14,"column_start":15,"column_end":24},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":3035},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\iter.rs","byte_start":114840,"byte_end":114849,"line_start":26,"line_end":26,"column_start":28,"column_end":37},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":3035},"to":{"krate":2,"index":7317}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\iter.rs","byte_start":115284,"byte_end":115293,"line_start":45,"line_end":45,"column_start":37,"column_end":46},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":3035},"to":{"krate":2,"index":7206}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\iter.rs","byte_start":116014,"byte_end":116023,"line_start":70,"line_end":70,"column_start":40,"column_end":49},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":3035},"to":{"krate":2,"index":2504}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\iter.rs","byte_start":116219,"byte_end":116228,"line_start":79,"line_end":79,"column_start":22,"column_end":31},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":3035},"to":{"krate":2,"index":2509}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\iter.rs","byte_start":116276,"byte_end":116285,"line_start":81,"line_end":81,"column_start":41,"column_end":50},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":3035},"to":{"krate":2,"index":2551}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\iter.rs","byte_start":116490,"byte_end":116499,"line_start":90,"line_end":90,"column_start":23,"column_end":32},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":3035},"to":{"krate":2,"index":2540}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bit_slice_adapter.rs","byte_start":126063,"byte_end":126078,"line_start":18,"line_end":18,"column_start":15,"column_end":30},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":3111},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bit_slice_adapter.rs","byte_start":127655,"byte_end":127670,"line_start":69,"line_end":69,"column_start":29,"column_end":44},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":3111},"to":{"krate":2,"index":2504}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bit_slice_adapter.rs","byte_start":130570,"byte_end":130585,"line_start":144,"line_end":144,"column_start":24,"column_end":39},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":3111},"to":{"krate":0,"index":87}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bit_slice_adapter.rs","byte_start":131494,"byte_end":131509,"line_start":172,"line_end":172,"column_start":30,"column_end":45},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":3111},"to":{"krate":0,"index":213}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bit_slice_adapter.rs","byte_start":133108,"byte_end":133123,"line_start":215,"line_end":215,"column_start":44,"column_end":59},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":3111},"to":{"krate":0,"index":301}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bit_slice_adapter.rs","byte_start":133428,"byte_end":133443,"line_start":225,"line_end":225,"column_start":46,"column_end":61},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":3111},"to":{"krate":0,"index":301}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bit_slice_adapter.rs","byte_start":133625,"byte_end":133640,"line_start":233,"line_end":233,"column_start":48,"column_end":63},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":3111},"to":{"krate":0,"index":301}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bit_slice_adapter.rs","byte_start":133972,"byte_end":133987,"line_start":244,"line_end":244,"column_start":43,"column_end":58},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":3111},"to":{"krate":0,"index":301}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bit_slice_adapter.rs","byte_start":134174,"byte_end":134189,"line_start":253,"line_end":253,"column_start":53,"column_end":68},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":3111},"to":{"krate":0,"index":301}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bit_slice_adapter.rs","byte_start":134540,"byte_end":134555,"line_start":264,"line_end":264,"column_start":55,"column_end":70},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":3111},"to":{"krate":0,"index":301}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\logic.rs","byte_start":136890,"byte_end":136896,"line_start":16,"line_end":16,"column_start":9,"column_end":15},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":3133},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\logic.rs","byte_start":137260,"byte_end":137266,"line_start":29,"line_end":29,"column_start":42,"column_end":48},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":3143},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\logic.rs","byte_start":137663,"byte_end":137668,"line_start":42,"line_end":42,"column_start":42,"column_end":47},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":3156},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\logic.rs","byte_start":138068,"byte_end":138074,"line_start":55,"line_end":55,"column_start":42,"column_end":48},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":3169},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\logic.rs","byte_start":138404,"byte_end":138410,"line_start":68,"line_end":68,"column_start":45,"column_end":51},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":3182},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\logic.rs","byte_start":138967,"byte_end":138975,"line_start":88,"line_end":88,"column_start":42,"column_end":50},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":3198},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\logic.rs","byte_start":139519,"byte_end":139525,"line_start":111,"line_end":111,"column_start":24,"column_end":30},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":3133},"to":{"krate":0,"index":87}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\logic.rs","byte_start":140024,"byte_end":140030,"line_start":135,"line_end":135,"column_start":32,"column_end":38},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":3133},"to":{"krate":0,"index":301}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\logic.rs","byte_start":140316,"byte_end":140322,"line_start":149,"line_end":149,"column_start":29,"column_end":35},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":3133},"to":{"krate":2,"index":2504}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\logic.rs","byte_start":142758,"byte_end":142764,"line_start":225,"line_end":225,"column_start":24,"column_end":30},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":3182},"to":{"krate":0,"index":87}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\logic.rs","byte_start":143505,"byte_end":143511,"line_start":251,"line_end":251,"column_start":45,"column_end":51},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":3182},"to":{"krate":0,"index":301}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\logic.rs","byte_start":144206,"byte_end":144212,"line_start":275,"line_end":275,"column_start":35,"column_end":41},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":3182},"to":{"krate":2,"index":2504}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bit_fill.rs","byte_start":144724,"byte_end":144731,"line_start":14,"line_end":14,"column_start":33,"column_end":40},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":3502},"to":{"krate":0,"index":87}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bit_fill.rs","byte_start":145626,"byte_end":145633,"line_start":46,"line_end":46,"column_start":24,"column_end":31},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":3502},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bit_fill.rs","byte_start":146039,"byte_end":146046,"line_start":64,"line_end":64,"column_start":32,"column_end":39},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":3502},"to":{"krate":2,"index":2504}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bit_concat.rs","byte_start":146718,"byte_end":146727,"line_start":13,"line_end":13,"column_start":12,"column_end":21},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":3575},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bit_concat.rs","byte_start":146850,"byte_end":146859,"line_start":19,"line_end":19,"column_start":21,"column_end":30},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":3575},"to":{"krate":0,"index":87}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bit_concat.rs","byte_start":148062,"byte_end":148071,"line_start":59,"line_end":59,"column_start":32,"column_end":41},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":3575},"to":{"krate":2,"index":2504}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bool_adapter.rs","byte_start":149608,"byte_end":149619,"line_start":31,"line_end":31,"column_start":27,"column_end":38},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":3665},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bool_adapter.rs","byte_start":150394,"byte_end":150405,"line_start":60,"line_end":60,"column_start":31,"column_end":42},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":3665},"to":{"krate":2,"index":3064}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bool_adapter.rs","byte_start":150529,"byte_end":150540,"line_start":68,"line_end":68,"column_start":34,"column_end":45},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":3665},"to":{"krate":2,"index":3077}},{"span":{"file_name":"C:\\Users\\sagar\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bv-0.11.1\\src\\adapter\\bool_adapter.rs","byte_start":152769,"byte_end":152780,"line_start":142,"line_end":142,"column_start":36,"column_end":47},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":3665},"to":{"krate":2,"index":2504}}]}